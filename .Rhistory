par(mfrow = c(1, 1)) # pour revenir à un seul graphique par sortie
plot.new()
par(mar = c(5,4,4,2) + 0.1) # paramètre des marges par défaut
plot.window(xlim = c(15, 35), # range(df_1$imc)
ylim = c(80, 180)) # range(df_1$pas)
grid() # ajoute une grille
### ajoute le nuage de points des femmes, groupe placebo
points(data = subset(df_1, subset = c(sex == "Féminin" & trait == "Placebo")),
pas ~ imc,
col = "indianred3", # placebo en rouge
pch = 4) # femme avec une croix
# ajoute le nuage de points des femmes, groupe traitement A
points(data = subset(df_1, subset = c(sex == 0 & trait == 2)),
pas ~ imc,
col = "dodgerblue3", # traitement A en bleu
pch = 4) # femme avec une croix
# ajoute le nuage de points des femmes, groupe traitement B
points(data = subset(df_1, subset = c(sex == 0 & trait == 3)),
pas ~ imc,
col = "palegreen3", # traitement B en vert
pch = 4) # femme avec une croix
# ajoute le nuage de points des hommes, groupe placebo
points(data = subset(df_1, subset = c(sex == 1 & trait == 1)),
pas ~ imc,
col = "indianred3", # placebo en rouge
pch = 1) # hommes avec un rond
# ajoute le nuage de points des hommes, groupe traitement A
points(data = subset(df_1, subset = c(sex == 1 & trait == 2)),
pas ~ imc,
col = "dodgerblue3", # traitement A en bleu
pch = 1) # hommes avec un rond
# ajoute le nuage de points des hommes, groupe traitement B
points(data = subset(df_1, subset = c(sex == 1 & trait == 3)),
pas ~ imc,
col = "palegreen3", # traitement B en vert
pch = 1) # hommes avec un rond
axis(1, # axe du bas
lwd = 1, # largeur de la ligne
font.axis=1) # taille de la police de caractère
axis(2, # axe à gauche
lwd = 1, # largeur de la ligne
font.axis=1) # taille de la police de caractère
title(xlab = "IMC (kg/m²)")
title(ylab = "PAS (mmHg)")
title(main = "Nuage de points de la PAS en fonction de l'IMC")
legend("bottomright",
c("Femme, P", "Femme, A", "Femme, B",
"Homme, P", "Homme, A", "Homme, B"),
pch = c(4,4,4,1,1,1),
col = c("indianred3", "dodgerblue3", "palegreen3",
"indianred3", "dodgerblue3", "palegreen3"),
ncol = 1,
cex = 0.7)
ggplot(data = df_1, mapping = aes(y = pas,
x = imc,
shape = sexL,
color = traitL)) +
geom_point()
ggplot(data = df_1, mapping = aes(y = pas, x = imc, shape = sexL,
color = traitL)) +
geom_point(size = 2) + # taille des symboles
labs(x = "IMC (kg/m²)", y = "PAS (mmHg)", # titre et axes
title = "PAS en fonction de l'IMC") +
scale_colour_discrete(name = "Traitement", # 1ère légende liée aux couleurs
breaks = c("Placebo", "Traitement A", "Traitement B"),
labels = c("Placebo", "Traitement", "Traitement B")) +
scale_shape_discrete(name = "Sex", # 2ème légende liée aux symboles
breaks = c("Féminin", "Masculin"),
labels = c("Féminin", "Masculin")) +
theme(axis.text = element_text(size = 8))
ggplot(data = df_1, mapping = aes(y = pas, x = imc, shape = sexL,
color = traitL)) +
geom_point(size = 2) + # taille des symboles
labs(x = "IMC (kg/m²)", y = "PAS (mmHg)", # titre et axes
title = "PAS en fonction de l'IMC") +
scale_colour_discrete(name = "Traitement", # 1ère légende liée aux couleurs
breaks = c("Placebo", "Traitement A", "Traitement B"),
labels = c("Placebo", "Traitement", "Traitement B")) +
scale_shape_discrete(name = "Sex", # 2ème légende liée aux symboles
breaks = c("Féminin", "Masculin"),
labels = c("Féminin", "Masculin")) +
theme(axis.text = element_text(size = 18))
ggplot(data = df_1, mapping = aes(y = pas, x = imc, shape = sexL,
color = traitL)) +
geom_point(size = 2) + # taille des symboles
labs(x = "IMC (kg/m²)", y = "PAS (mmHg)", # titre et axes
title = "PAS en fonction de l'IMC") +
scale_colour_discrete(name = "Traitement", # 1ère légende liée aux couleurs
breaks = c("Placebo", "Traitement A", "Traitement B"),
labels = c("Placebo", "Traitement", "Traitement B")) +
scale_shape_discrete(name = "Sex", # 2ème légende liée aux symboles
breaks = c("Féminin", "Masculin"),
labels = c("Féminin", "Masculin")) +
theme(axis.text = element_text(size = 12))
df_1 %>%
group_by(sex) %>%
summarise(n = sum(!is.na(imc)), # nombre de non-manquants
mean = mean(imc),
sd = sd(imc))
df_1 %>%
group_by(sexL) %>%
summarise(n = sum(!is.na(imc)), # nombre de non-manquants
mean = mean(imc),
sd = sd(imc))
df_1 %>%
group_by(sexL)
df_1 %>%
group_by(sexL) %>%
ungroup()
df_1 %>%
group_by(sexL) %>%
summarise(n = sum(!is.na(pas)), # nombre de non-manquants
mean = mean(pas),
sd = sd(pas))
df_1 %>%
group_by(traitL) %>%
summarise(n = sum(!is.na(pas)), # nombre de non-manquants
mean = mean(pas),
sd = sd(pas))
df_1 %>%
group_by(sexL) %>%
fct_count(traitL, prop = TRUE)
df_1 %>%
group_by(sexL) %>%
fct_count(traitL)
df_1
df_1 %>%
group_by(sexL) %>%
summarise(Placebo_n = sum(trait == 1),
Placebo_p = mean(trait == 1))
df_1 %>%
group_by(sexL) %>%
summarise("Placebo, n" = sum(trait == 1), # effectif
"Placebo, %" = mean(trait == 1) * 100, # % en ligne (selon le sex)
"Traitement A, n" = sum(trait == 2),
"Traitement A, %" = mean(trait == 2) * 100,
"Traitement B, n" = sum(trait == 3),
"Traitement B, %" = mean(trait == 3) * 100)
df_1 %>% t.test(pas ~ sexL,
var.equal = TRUE)
df_1 %>% t.test(data = .,
pas ~ sexL,
var.equal = TRUE)
ttest_pas_sex <- df_1 %>% t.test(data = ., # placeholder pour indiquer la base de données
pas ~ sexL, # formula
var.equal = TRUE)
df_1 %>% car::leveneTest(pas ~ sexL)
df_1 %>% car::leveneTest(data = .,
pas ~ sexL)
par(mfrow = c(1, 2)) # les 2 figures seront présentées sur 1 ligne
for (i in 1:2) {
vect <- df_1$pas[as.integer(df_1$sexL) == i]
plot(density(vect), # densité de kernel
main = attributes(df_1$sexL)$levels[i])
lines(x = seq(min(vect), max(vect), length(50)), # loi normale de référence
y = dnorm(seq(min(vect), max(vect), length(50)),
mean = mean(vect),
sd = sd(vect)),
col = "red", lty = "dashed")
}
rm(vect)
par(mfrow = c(1, 2)) # les 2 figures seront présentées sur 1 ligne
for (i in 1:2) {
vect <- df_1$pas[as.integer(df_1$sexL) == i]
plot(density(vect), # densité de kernel
main = attributes(df_1$sexL)$levels[i])
lines(x = seq(min(vect), max(vect), length(50)), # loi normale de référence
y = dnorm(seq(min(vect), max(vect), length(50)),
mean = mean(vect),
sd = sd(vect)),
col = "red", lty = "dashed")
}
rm(vect)
ggplot(data = df_1, aes(x = pas, group = sexL)) +
geom_density() +
facet_wrap(~ group)
ggplot(data = df_1, aes(x = pas, group = sexL)) +
geom_density()
ggplot(data = df_1, aes(x = pas, group = sexL)) +
geom_density() +
facet_wrap(~group)
ggplot(data = df_1, aes(x = pas, group = sexL)) +
geom_density() +
facet_wrap(group)
ggplot(data = df_1, aes(x = pas, group = sexL)) +
geom_density() +
facet_wrap(var(group))
ggplot(data = df_1, aes(x = pas, group = sexL)) +
geom_density() +
facet_wrap(var(sexL))
ggplot(data = df_1, aes(x = pas)) +
geom_density() +
facet_wrap(var(sexL))
ggplot(mpg, aes(displ, hwy)) + geom_point()
ggplot(mpg, aes(displ, hwy)) + geom_point() + facet_wrap(vars(class))
mpg$class
str(mpg)
ggplot(data = df_1, aes(x = pas)) +
geom_density() +
facet_wrap(var(sex))
ggplot(data = df_1, aes(x = pas)) +
geom_density()
ggplot(data = df_1, aes(x = pas)) +
geom_density() +
facet_wrap(var(sex))
ggplot(data = df_1, aes(x = pas)) +
geom_density() +
facet_wrap(var("sexL"))
ggplot(data = df_1, aes(x = pas)) +
geom_density() +
facet_wrap(var("sex"))
df_1
ggplot(data = df_1, aes(x = pas)) +
geom_density() +
facet_wrap(var("sexL"))
ggplot(data = df_1, aes(x = pas)) +
geom_density() +
facet_wrap(var("sexL"), ncol = 2)
ggplot(data = df_1, aes(x = pas, group = sexL)) +
geom_density() +
facet_wrap(var("sexL"), ncol = 2)
df1 <- data.frame(x = 1:3, y = 1:3, gender = c("f", "f", "m"))
df2 <- data.frame(x = 2, y = 2)
ggplot(df1, aes(x, y)) +
geom_point(data = df2, colour = "red", size = 2) +
geom_point() +
facet_wrap(~gender)
ggplot(data = df_1, aes(x = pas, group = sexL)) +
geom_density() +
facet_wrap(~sexL, ncol = 2)
ggplot(data = df_1, aes(x = pas)) +
geom_density() +
facet_wrap(~sexL, ncol = 2)
ggplot(data = df_1, aes(x = pas)) +
geom_density() +
stat_function(fun = dnorm,
args = list(mean=mean(data$x), sd=sd(data$x)),
col="red", lwd=2, lty='dashed') +
facet_wrap(~sexL, ncol = 2)
ggplot(data = df_1, aes(x = pas)) +
geom_density() +
stat_function(fun = dnorm,
args = list(mean=mean(df_1$x), sd=sd(df_1$x)),
col="red", lwd=2, lty='dashed') +
facet_wrap(~sexL, ncol = 2)
df_1 %>%
filter(sex == 0) %>%
ggplot(aes(x = pas)) +
geom_density()
df_1[df_1$sex == 0, "pas"]
df_1 %>%
filter(sex == 0) %>%
ggplot(aes(x = pas)) +
geom_density() +
stat_function(fun = dnorm,
args = list(mean = mean(df_1[df_1$sex == 0, "pas"]),
sd = sd(df_1[df_1$sex == 0, "pas"])),
col="red", lwd=2, lty='dashed')
list(mean = mean(df_1[df_1$sex == 0, "pas"]),
sd = sd(df_1[df_1$sex == 0, "pas"]))
mean(df_1[df_1$sex == 0, "pas"])
df_1[df_1$sex == 0, "pas"]
mean(df_1[df_1$sex == 0, "pas"])
df_1 %>%
filter(sex == 0) %>%
ggplot(aes(x = pas)) +
geom_density()
df_1 %>%
filter(sex == 1) %>%
ggplot(aes(x = pas)) +
geom_density()
mean(as.double(df_1[df_1$sex == 0, "pas"]))
df_1[df_1$sex == 0, "pas"]
class(df_1[df_1$sex == 0, "pas"])
as.double(df_1[df_1$sex == 0, "pas"])
as.vector(df_1[df_1$sex == 0, "pas"])
mean(as.vector(df_1[df_1$sex == 0, "pas"]))
mean(df_1[df_1$sex == 0, "pas"])
mean(df_1[df_1$sex == 0, "pas"], na.rm = TRUE)
df_1$pas[df_1$sex == 0]
mean(df_1$pas[df_1$sex == 0])
df_1 %>%
filter(sex == 0) %>%
ggplot(aes(x = pas)) +
geom_density() +
stat_function(fun = dnorm,
args = list(mean = mean(df_1$pas[df_1$sex == 0]),
sd = sd(df_1$pas[df_1$sex == 0])),
col="red", lwd=2, lty='dashed')
df_1 %>%
filter(sex == 1) %>%
ggplot(aes(x = pas)) +
geom_density() +
stat_function(fun = dnorm,
args = list(mean = mean(df_1$pas[df_1$sex == 1]),
sd = sd(df_1$pas[df_1$sex == 1])),
col="red", lwd=2, lty='dashed')
df_1 %>%
filter(sex == 1) %>%
ggplot(aes(x = pas)) +
geom_density() +
stat_function(fun = dnorm,
args = list(mean = mean(df_1$pas[df_1$sex == 1]),
sd = sd(df_1$pas[df_1$sex == 1])),
col = "red", lwd = 0.5, lty = 'dashed')
df_1 %>% wilcox.test(pas ~ sex) # p-value = 1.529e-06
df_1 %>% wilcox.test(data = ., # placeholder
pas ~ sex) # p-value = 1.529e-06
df_1 %>%
lm(pas ~ traitL,
data = .) # placeholder
df_1 %>%
lm(pas ~ traitL,
data = . # placeholder
)
df_1 %>%
lm(pas ~ traitL,
data = . # placeholder
)  %>%
anova()
anova_pas_trait <- df_1 %>%
lm(pas ~ traitL,
data = .) %>% # placeholder
anova()
anova_pas_trait
res(anova_pas_trait)
model_lin <- df_1 %>%
lm(pas ~ traitL,
data = .)
rm(model_lin)
mod_pas_trait <- df_1 %>%
lm(pas ~ traitL,
data = .)
mod_pas_trait
ggplot() +
geom_qq(aes(mod_pas_trait$residuals))
ggplot() +
geom_qq(aes(sample = mod_pas_trait$residuals))
ggplot() +
geom_qq(aes(sample = mod_pas_trait$residuals)) +
stat_qq_line()
ggplot() +
geom_qq(aes(sample = mod_pas_trait$residuals)) +
stat_qq() + stat_qq_line()
ggplot(aes(sample = mod_pas_trait$residuals)) +
stat_qq() + stat_qq_line()
ggplot(aes(sample = mod_pas_trait$residuals)) +
geom_qq()
ggplot(mapping = aes(sample = mod_pas_trait$residuals)) +
geom_qq()
ggplot(mapping = aes(sample = mod_pas_trait$residuals)) +
geom_qq() +
stat_qq() + stat_qq_line()
ggplot(mapping = aes(sample = mod_pas_trait$residuals)) +
geom_qq() +
stat_qq()
ggplot(mapping = aes(sample = mod_pas_trait$residuals)) +
geom_qq() +
stat_qq() + stat_qq_line() # ajoute la ligne de référence
df_1 %>% ggplot(mapping = aes(sample = pas, colour = sexL)) +
stat_qq() +
stat_qq_line() # ajoute la ligne de référence
df_1 %>%
kruskal.test(pas ~ traitL, data = .)
df_1 %>% chisq.test(table(sexL ~ traitL),
correct = FALSE)
df_1 %>% chisq.test(table(sexL ~ traitL),
data = .,
correct = FALSE)
df_1 %>% table(sexL ~ traitL,
data = .)
?base::table
df_1 %>% with(table(sexL, traitL))
df_1 %>%
with(table(sexL, traitL)) %>%
chisq.test(correct = FALSE)
chi2 <- df_1 %>%
with(table(sexL, traitL)) %>%
chisq.test(correct = FALSE)
chi2
chi2$expected
chi2$observed
df_1 %>%
with(table(sexL, traitL)) %>%
fisher.test()
fisher.test(table(df_1$sexL, df_1$traitL))
fisher.test
fisher.test(table(df_1$sexL, df_1$traitL))
df_1 %>% with(cor.test(imc, pas, method = "pearson"))
df_1 %>% with(cor.test(imc, pas, method = "spearman"))
model <- df_1 %>% lm(pas ~ traitL + sexL + imc,
data = .)
model
df_1 %>%
lm(pas ~ traitL + sexL + imc,
data = .) %>%
summary()
df_1 %>%
lm(pas ~ traitL + sexL + imc,
data = .) %>%
select(residuals)
df_1 %>%
lm(pas ~ traitL + sexL + imc,
data = .) %>%
class
ggplot() +
geom_point(mapping = aes(y = model$residuals, # résidus
x = model$fitted.values))
ggplot() +
geom_point(mapping = aes(y = model$residuals, # résidus
x = model$fitted.values)) + # valeurs prédites
geom_curve(mapping = aes(y = model$residuals,
x = model$fitted.values))
ggplot() +
geom_point(mapping = aes(y = model$residuals, # résidus
x = model$fitted.values)) + # valeurs prédites
geom_smooth(mapping = aes(y = model$residuals,
x = model$fitted.values))
ggplot() +
geom_point(mapping = aes(y = model$residuals, # résidus
x = model$fitted.values)) + # valeurs prédites
geom_smooth(mapping = aes(y = model$residuals,
x = model$fitted.values)) +
labs(y = "résidus", x = "valeurs prédites")
ggplot() +
geom_point(mapping = aes(y = model$residuals, # résidus
x = model$fitted.values)) + # valeurs prédites
geom_smooth(mapping = aes(y = model$residuals,
x = model$fitted.values),
method = "loess",
colour = "red",
linetype = 2,
se = FALSE) + # supprime la bande d'IC95%
labs(y = "résidus", x = "valeurs prédites")
ggplot() +
geom_point(mapping = aes(y = model$residuals, # résidus
x = model$fitted.values)) + # valeurs prédites
geom_smooth(mapping = aes(y = model$residuals,
x = model$fitted.values),
method = "loess", # méthode de lissage
colour = "red", # couleur de ligne
linetype = 2, # type de ligne
linewidth = 0.5, # largeur de ligne
se = FALSE) + # supprime la bande d'IC95%
labs(y = "résidus", x = "valeurs prédites")
ggplot() +
geom_point(mapping = aes(y = model$residuals, # résidus
x = model$fitted.values), # valeurs prédites
shape = 1)
ggplot() +
geom_point(mapping = aes(y = model$residuals, # résidus
x = model$fitted.values), # valeurs prédites
shape = 1) + # symbole des points
geom_smooth(mapping = aes(y = model$residuals,
x = model$fitted.values),
method = "loess", # méthode de lissage
colour = "red", # couleur de ligne
linetype = 2, # type de ligne
linewidth = 0.5, # largeur de ligne
se = FALSE) + # supprime la bande d'IC95%
labs(y = "résidus", x = "valeurs prédites")
ggplot(mapping = aes(sample = model$residuals)) +
geom_qq() +
stat_qq() + stat_qq_line()
ggplot(mapping = aes(sample = model$residuals)) +
geom_qq(shape = 1) +
stat_qq() + stat_qq_line()
ggplot(mapping = aes(sample = model$residuals)) +
geom_qq(shape = 1) +
stat_qq(shape = 1) + stat_qq_line()
ggplot(mapping = aes(sample = model$residuals)) +
stat_qq(shape = 1) + stat_qq_line()
ggplot(mapping = aes(sample = model$residuals)) +
geom_qq() +
stat_qq(shape = 1) + stat_qq_line()
ggplot(mapping = aes(sample = model$residuals)) +
geom_qq(shape = 1) +
stat_qq(shape = 1) + stat_qq_line()
?dplyr::filter
?case_when
df_1 %>%
mutate(obesite = if_else(df_1$imc >= 30, 1, 0))
slice(df_1) # la variable n'a pas été enregistrée dans la base df_1 !
slice(df_1, 1)
slice(df_1, n = 3)
df_1 %>% slice_head(n = 3)
df_1 <- df_1 %>%
mutate(obesite = if_else(df_1$imc >= 30, 1, 0))
df_1
df_1  %>% slice_head(n = 3)
df_1 %>%
group_by(obesite) %>% # prépare à une analyse par groupe
summarise(min = min(imc), # calcul le min et max selon les groupes définis
max = max(imc))
df_1 <- df_1 %>%
mutate(imc_cl = case_when(imc < 18.5 ~ 1,
imc >= 18.5 & imc < 25 ~ 2,
imc >= 25 & imc < 30 ~ 3,
imc >= 30 ~ 4))
df_1 %>% slice_head(n = 3)
df_1 %>%
group_by(imc_cl) %>%
summarise(min = min(imc),
max = max(imc))
with(df_1, table(as.factor(imc_cl), as.factor(obesite), deparse.level = 2))
df_1 %>% group_by(imc_cl, obesite) %>% summarise(n = n())
df_1 %>% count(imc_cl, obesite)
df_1 %>%
group_by(sexL) %>% fct_count(traitL)
df_1 %>%
group_by(sexL) %>% as.factor() %>% fct_count(traitL)
meta_df_1
