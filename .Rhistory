objet_3 <- c(10 / 3, 4 * 5) # un vecteur de 2 réels, calculés par 2 opérations
objet_4 <- function(x) {x + 2} # une fonction qui ajoute 2 au vecteur x
objet_5 <- 42 # un scalaire égal à 42
?base::acos
?TRUE
?character
?integer
Inf
class(c(1,2,3))
typeof(c(1,2,3))
is.numeric(as.integer(1))
is.numeric(as.integer(1L))
is.numeric(1L)
is.integer(1L)
is.integer(1.2)
as.integer(1.2)
?data.frame
?tible
?tibble
??tible
c("A","B","","D")
c("A","B",NA,"D")
?mean
?t.test
help.search("student")
typeof(12.34)
class(12.34)
class("bonjour")
mode(3.24)
exp(-1)
log(-1)
log10(100)
log(100, base = exp(10))
log(100, base = 10
)
?Constants
typeof(pi)
class(pi)
log(100, base = 2)
sqrt(-2)
2 * pi * 10
class(c(1:10))
mode(c(1:10))
typeof(c(1:10))
is.vector(5)
typeof(2.53)
typeof(5L)
mode(2.53)
mode(5L)
storage.mode(2.53)
storage.mode(5L)
# les chaînes de caractères sont de type et de mode 'character'
typeof(c("hello","Toulouse"))
mode(c("hello","Toulouse"))
# les valeurs logiques sont de type 'logical'
typeof(c(TRUE,FALSE,FALSE))
mode(c(TRUE,FALSE,FALSE))
1/1000000
1e6 * 1000
x_1 + x_2 # 4 + 5 = 9
x_1 <- 4
x_2 <- 5
x_1 + x_2 # 4 + 5 = 9
10 - x_1 # 10 - 4 = 6
x_1 * x_2 #  4 * 5 = 20
20 / x_2 # 20 / 5 = 4
x_1^2 #  4^2 = 16
10^-1 # 1/10 = 0.1
25^(0.5)
as.factor(c(1,2,3))
as.factor(c(1.5,2.5,3.5))
as.factor(c(-2, -10.43, 24.3))
as.logical(2)
as.logical(10)
as.logical(0.5)
as.logical(0)
as.logical(-1)
as.numeric(T)
as.numeric(FALSE)
as.numeric(5L)
as.character(4.95)
as.integer(4.95)
as.logical(4.95)
as.logical(1)
as.logical(-14)
as.numeric(FALSE)
as.integer(FALSE)
as.logical(NA)
attributes(as.Date("2020-01-01"))
typeof(2.53)
mode(2.53)
storage.mode(2.53)
typeof(5L)
mode(5L)
storage.mode(5L)
typeof("bonjour")
mode("character")
storage.mode("character")
typeof(as.Date("2025-07-01"))
mode(as.Date("2025-07-01"))
storage.mode(as.Date("2025-07-01"))
typeof(TRUE)
mode(TRYE)
mode(TRuE)
mode(TRUE)
storage.mode(TRUE)
help(ltmle)
?ltmle
??ltmle
??ltmle
help(student)
??student
round(4.5)
round(5.5)
round(4.45)
round(4.45,digits = 1)
round(4.46,digits = 1)
round(4.451,digits = 1)
round(4.449,digits = 1)
x2 <- pi * 100^(-1:3)
x2
round(x2, 3)
signif(x2, 3)
round(4.5)
round(5.5)
round(0.049, digits = 2)
round(0.0450, digits = 2)
round(0.0451, digits = 2)
round(0.04500, digits = 2)
round(0.04501, digits = 2)
round(5.550, digits = 1)
round(5.551, digits = 1)
round(0.04500, digits = 2)
round(0.15, 1)
round(0.15, 1)
round(0.15, 1)
round(0.150, 1)
round(4.45, digits = 1)
round(4.75, digits = 1)
round(0.04500, digits = 2)
round(0.04501, digits = 2)
round(0.09300, digits = 2)
round(0.10301, digits = 2)
round(0.08600, digits = 2)
round(0.09300, digits = 2)
round(4.5, digits = 0)
round(1.5, digits = 0)
getOption("digits")
format(4.450, digits = 1)
format(4.750, digits = 1)
format(4.750, digits = 2)
format(4.450, digits = 2)
sprintf("%f", pi)
sprintf("%.3f", pi)
sprintf("%1.0f", pi)
sprintf("%5.1f", pi)
sprintf("%g", pi)
signif(123.456789, digits = 1)
signif(123.456789, digits = 1)
signif(123.456789, digits = 2)
signif(123.456789, digits = 3)
signif(123.456789, digits = 4)
signif(123.456789, digits = 5)
signif(4.450, digits = 4)
signif(4.450, digits = 3)
signif(4.450, digits = 2)
signif(4.750, digits = 4)
signif(4.750, digits = 3)
signif(4.750, digits = 2)
signif(4.450, digits = 3)
signif(4.450, digits = 2)
signif(4.750, digits = 3)
signif(4.750, digits = 2)
install.packages("Rmoji")
library(Rmoji)
emoji_list()
Rmoji::insert_emoji("star")
⭐
print(Rmoji::insert_emoji("star"))
detach("package:Rmoji", unload = TRUE)
install.packages("emojifont")
library(emojifont)
emoji(search_emoji('smile'))
emoji(search_emoji('sunglasses'))
?emojifont
??emojifont
list.emojifonts()
library(Rmoji)
detach(Rmoji)
detach("package:Rmoji", unload = TRUE)
detach("package:emojifont", unload = TRUE)
install.packages("r2symbols")
symKey(keyword = "chess", font.size = 40)
library(r2symbols)
symKey(keyword = "chess", font.size = 40)
symbol("alpha")
trunc(123.456789)
trunc(123.456789, digits = 5)
trunc(4.5)
trunc(1.5)
trunc(123.456)
floor(c(1.1,2.9))
floor(4.1)
floor(4.9)
ceiling(4.1)
ceiling(4.9)
signif(4.450, digits = 3)
signif(4.450, digits = 2)
signif(4.750, digits = 3)
signif(4.750, digits = 2)
signif(4.45, digits = 3)
signif(4.45, digits = 2)
signif(4.75, digits = 3)
signif(4.75, digits = 2)
signif(123.456789, digits = 1)
signif(123.456789, digits = 5)
signif(123.456789, digits = 4)
signif(123.4500, digits = 4)
signif(123.5500, digits = 4)
x_1 <- "Bonjour"
x_2 <- "Toulouse"
paste(x1, x2)
x1 <- "Bonjour"
x2 <- "Toulouse"
paste(x1, x2)
paste0(x1, x2)
paste(x1, x2, sep = ", ")
paste(x1, 100, x2)
test <- c("L1", "L2", "L3", "L4")
test
grep(test, "L")
?paste
?paste()
?paste()
NA == 5
NA < 10
NA == NA
NA < 10
is.na(10)
is.na(NA)
is.na(c(1,2,3,NA,5,6,NA,8,9,10))
FALSE & FALSE
FALSE & TRUE
TRUE & TRUE
TRUE * TRUE
TRUE | TRUE
TRUE | FALSE
FALSE | TRUE
FALSE | FALSE
(5 > 10) | (2 != 5) # TRUE OU TRUE donne TRUE
(5 > 10) | (2 == 5) # TRUE OU FALSE donne FALSE
(5 < 10) | (2 == 5) # FALSE OU FALSE donne FALSE
(5 < 10) | (2 != 5)
(5 < 10) | (2 == 5)
(5 > 10) | (2 == 5)
(5 > 10)
(2 != 5)
(5 > 10)
(2 != 5)
(5 < 10) | (2 != 5)
(5 > 10) | (2 != 5)
(5 > 10) | (2 == 5)
!(5 < 10)
!(5 > 10)
xor(5 < 10), (2 != 5)
xor((5 < 10), (2 != 5))
(5 < 10)
(2 != 5)
xor((5 > 10), (2 != 5))
xor((5 > 10), (2 == 5))
xor(TRUE, TRUE)
xor(TRUE, FALSE)
xor(FALSE, TRUE)
xor(FALSE, FALSE)
xor((5 < 10), (2 != 5)) # (TRUE) OU exclusif (TRUE) donne FALSE
xor((5 > 10), (2 != 5)) # (FALSE) OU exclusif (TRUE) donne TRUE
xor((2 != 5), (5 > 10)) # (TRUE) OU exclusif (FALSE) donne TRUE
xor((5 > 10), (2 == 5)) # (FALSE) OU exclusif (FALSE) donne FALSE
is.numeric(5L)
is.integer(4.95)
is.numeric("bonjour")
is.character("bonjour")
is.character(4.95)
is.logical(1)
is.logical(TRUE)
is.integer(4.95)
"azer"
is.numeric(5L) # TRUE, un entier est bien un objet numérique
is.integer(4.95) # FALSE, 4.95 n'est pas un entier
is.numeric("bonjour") # FALSE "bonjour" est une chaîne de caractères
is.character("bonjour") # TRUE, "bonjour" est bien une chaîne de caractères
is.character(4.95) # FALSE, 4.95 est un objet numérique
is.logical(1) # FALSE, 1 est un objet numérique
is.logical(as.logical(1)) # TRUE, as.logical(1) = TRUE, qui est un objet logique
is.logical(TRUE) # TRUE est bien un objet logique
is.identical(5, 10)
identical(5, 10)
identical(c(1,2,3), c(1,2,3))
as.list(c(1,2,3))
as.list(c(1,2,3),c(4,5,6),c(7,8,9))
x_1 <- 1:5
x_2 <- 1:9
list(x1,x2)
list(x_1,x_2)
list(x_1,x2)
data(iris)
View(data(iris))
df <- data(iris)
df
data("iris")
risi
iris
data("BOD")
BOD
df <- data(sleep)
df
data(sleep)
sleep
vect_logic <- c(TRUE, FALSE, FALSE, F, T, T, FALSE, TRUE)
print(vect_logic)
vect_num <- c(1, pi, 3.54)
vect_num
# Un vecteur de 3 nombres réels
vect_num <- c(1, pi, 3.54)
print(vect_num)
# Un vecteur de 5 entiers
vect_int <- c(5L, 4)
# Un vecteur de 6 chaînes de caractères
vect_char <- c("a", "B", "XYZ", "HELLO", "HOMME", "femme")
# Un vecteur logique
# pour les valeurs logiques, on peut utiliser les abbréviations T pour TRUE,
# et F pour FALSE
vect_logic <- c(TRUE, FALSE, FALSE, F, T, T, FALSE, TRUE)
print(vect_logic)
class(vect_num)
class(vect_int)
class(vect_char)
class(vect_logic)
vect_new <- c(vect_num, vect_int)
print(vect_new)
vect_num <- c(1, pi, 3.54)
print(vect_num)
# Un vecteur de 5 entiers
vect_int <- c(5L, 4L, -3L, 15L, -8L)
vect_new <- c(vect_num, vect_int)
print(vect_new)
# Un vecteur de 3 nombres réels
vect_num <- c(1, pi, 3.54)
print(vect_num)
# Un vecteur de 5 entiers
vect_int <- c(5L, 4L, -3L, 15L, -8L)
# Si on combine ces 2 vecteurs, on obtient un vecteur de 8 nombres réels
vect_new <- c(vect_num, vect_int)
print(vect_new)
# 1.000000  3.141593  3.540000  5.000000  4.000000 -3.000000 15.000000 -8.000000
# Un vecteur de 6 chaînes de caractères
vect_char <- c("a", "B", "XYZ", "HELLO", "HOMME", "femme")
# Un vecteur logique
# pour les valeurs logiques, on peut utiliser les abbréviations T pour TRUE,
# et F pour FALSE
vect_logic <- c(TRUE, FALSE, FALSE, F, T, T, FALSE, TRUE)
print(vect_logic)
# la fonction class() permet de décrire le type du vecteur
class(vect_num) # numeric
class(vect_int) # numeric
class(vect_char) # character
class(vect_logic) # logical
length(vect_num) # numeric
length(vect_int) # numeric
length(vect_new) # numeric
length(vect_char) # character
length(vect_logic) # logical
vect_melange <- c(1,2,"trois",4)
# les valeurs numériques seront transformées de force en caractères
print(vect_melange)
c(5L, 4L, -3L, 15L, -8L)
class(vect_new) # numeric
class(vect_int)
?seq()
vect_1a10 <- 1:10 # vecteur ascendant
vect_5_a_moins5 <- 5:-5 # vecteur descendant
print(vect_1a10)
vect_5_a_moins5 <- 5:-5 # vecteur descendant
print(vect_5_a_moins5)
vect_3_a_moins5 <- 3:-5 # vecteur descendant
print(vect_3_a_moins5)
?rep
rep(1:4, times = 3)
rep(1:4, times = 3)
rep(1:4, each = 3)
rep(1:4, length.out = 10)
rep(5, times = 3)
seq(from = 1, to = 10, by = 2)
seq(from = 1, to = 50, by = 2, length.out = 15)
seq(from = 1, to = 50, length.out = 5)
seq(from = 0, to = 50, length.out = 5)
seq(from = 1, to = 50, length.with = c("un","deux","trois"))
seq(from = 1, to = 50, along.with = c("un","deux","trois"))
seq(from = 1, to = 50, along.with = c("dix","vingt","trente"))
seq(from = 1, to = 3, by = 0.5)
seq(from = 1, to = 3, by = 1/3)
seq(from = 1, to = 4, by = 1/3)
seq(from = 1, to = 4, by = 2/3)
seq(from = 0, to = 10, by = 3.5)
seq(from = 0, to = 10, by = 2.5)
seq(from = 1, to = 10, by = 1.5)
seq(from = 0, to = 10, by = 1.5)
vect_int <- c(5L, 4L, -3L, 15L, -8L)
print(vect_int)
vect_num <- c(1, pi, 3.54)
print(vect_num)
vect_char <- c("a", "B", "XYZ", "HELLO", "HOMME", "femme")
vect_char
vect_logic <- c(TRUE, FALSE, FALSE, F, T, T, FALSE, TRUE)
print(vect_logic)
# Un vecteur de 3 nombres réels
vect_num <- c(1, pi, 3.54)
print(vect_num) # [1] 1.000000 3.141593 3.540000
# Un vecteur de 5 entiers
vect_int <- c(5L, 4L, -3L, 15L, -8L)
print(vect_int) # [1]  5  4 -3 15 -8
# Si on combine ces 2 vecteurs, on obtient un vecteur de 8 nombres réels
# (les nombres entiers sont automatiquement transformés en nombres réels pour
# qu'ils soient  tous du même type)
vect_new <- c(vect_num, vect_int)
print(vect_new)
# 1.000000  3.141593  3.540000  5.000000  4.000000 -3.000000 15.000000 -8.000000
# Un vecteur de 6 chaînes de caractères
vect_char <- c("a", "B", "XYZ", "HELLO", "HOMME", "femme")
vect_char # [1] "a"     "B"     "XYZ"   "HELLO" "HOMME" "femme"
# Un vecteur logique
# pour les valeurs logiques, on peut utiliser les abbréviations T pour TRUE,
# et F pour FALSE
vect_logic <- c(TRUE, FALSE, FALSE, F, T, T, FALSE, TRUE)
print(vect_logic) # [1]  TRUE FALSE FALSE FALSE  TRUE  TRUE FALSE  TRUE
# la fonction class() permet de décrire le type du vecteur
class(vect_num) # numeric
class(vect_int) # vect_int
class(vect_new) # numeric
class(vect_char) # character
class(vect_logic) # logical
# Si vous créez le vecteur suivant en mélangeant valeurs numériques et
# chaînes de caractères
vect_melange <- c(1,2,"trois",4)
# les valeurs numériques sont transformées de force en chaînes de caractères
# c("X","X",...,"X","X") pour que toutes les valeurs soient du même type.
print(vect_melange)
# [1] "1"     "2"     "trois" "4"
length(vect_num) # 3
length(vect_int) # 5
length(vect_new) # 8
length(vect_char) # 6
length(vect_logic) # 8
seq(from = 0, to = 10, by = 2)
seq(from = 0, to = 60, along.with = c("dix","vingt","trente"))
seq(from = 1, to = 50, length.out = 5)
seq(from = 1, to = 10, by = 2)
paste0("L",seq(from = 1, to = 10))
# additionne +2 à la séquence c(1,2,3,4,5)
seq(from = 1, to = 5) + 2
# soustrait -2 à la séquence c(1,2,3,4,5)
seq(from = 1, to = 5) - 2
# multiplie par 5 la séquence c(1,2,3,4,5)
seq(from = 1, to = 5) * 5
# divise par 5 la séquence c(1,2,3,4,5)
seq(from = 1, to = 5) / 5
vec_A <- 1:5
vec_B <- c(-1, +1, -2, +2, -3)
vec_A + vec_B
vec_A <- c(1, 2, 3, 4, 5)
vec_B <- c(-1, +1, -2, +2, -5)
vec_A + vec_B
vec_A - vec_B
vec_A * vec_B
vec_A - vec_B
vec_A / vec_B
vec_A + vec_C
vec_A <- c(1, 2, 3, 4, 5)
vec_C <- c(1, 2, 3)
# addition : c(1 + 1, 2 + 2, 3 + 3, 4 + 1, 5 + 2)
vec_A + vec_C
vec_A - vec_C
vec_A * vec_C
vec_A / vec_C
vec_A <- c(1, 2, 3, 4, 5, 6)
vec_C <- c(1, 2, 3)
vec_A + vec_C
rep(1:4, length.out = 10)
vec_A <- c(1, 2, 3, 4, 5)
vec_B <- c(-1, +1, -2, +2, -5)
vec_A + vec_B
vec_A - vec_B
vec_A * vec_B
vec_A * vec_B
vec_A / vec_B
vec_A <- c(1, 2, 3, 4, 5)
vec_C <- c(1, 2, 3)
vec_A + vec_C
vec_A - vec_C
vec_A * vec_C
vec_A / vec_C
names(vec_A)
paste0("L",seq(from = 1, to = 10))
paste0(c("A","B","C"), seq(from = 1, to = 10))
5 %in% c(4,5,6)
5 %in% c(7,8,9)
c(1, 2, 3) %in% seq(from = 1, to = 9, by = 2)
seq(from = 1, to = 9, by = 2)
seq(from = 1, to = 9, by = 2) %in% c(1, 2, 3)
c(TRUE, TRUE, FALSE, FALSE) & c(TRUE, FALSE, TRUE, FALSE)
c(TRUE, TRUE, FALSE, FALSE) | c(TRUE, FALSE, TRUE, FALSE)
c(TRUE, TRUE, FALSE, FALSE) && c(TRUE, FALSE, TRUE, FALSE)
