paste0("la moyenne de l'IMC est ",
a = _, # ne fonctionne pas si on indique "_" seul, il faut un format d'argument "a = _"
" kg/m2")
### 1ers exemples d'analyse de base de données :
rm(list = ls())
# ---------------------------------------------------------------------------- #
# 1) Importer les bases ----
# ---------------------------------------------------------------------------- #
df_1 <- read.csv2("data/df_1.csv")
meta_df_1 <- read.csv2("data/meta_df_1.csv")
meta_df_1
#      var               label id_labs code_labs         labs
# 1 subjid Identifiant patient       1        NA
# 2    sex                Sexe       1         0      Féminin
# 3    sex                Sexe       2         1     Masculin
# 4    imc         IMC (kg/m²)       1        NA
# 5  trait          Traitement       1         1      Placebo
# 6  trait          Traitement       2         2 Traitement A
# 7  trait          Traitement       3         3 Traitement B
# 8    pas          PAS (mmHg)       1        NA
# ---------------------------------------------------------------------------- #
# 2) Jeter un oeil à la base de données ----
# ---------------------------------------------------------------------------- #
# pipe natif de R :
# le pipe
# x |> f() est équivalente à f(x) pour une fonction dont le 1er argument est argument x
# et l’écriture x |> f(y) est équivalent à f(x, y) pour une fonction à deux arguments, x et y
# c'est à dire que la valeur x à gauche du pipe (LHS, left-hand side)
# est appliquée au premier argument dans la fonction à droite du pipe (RHS right-hand side)
df_1 |> head() # équivalent de head(df_1)
df_1 |> tail()  # équivalent de tail(df_1)
df_1 |> str() # équivalent de str(df_1)
# cela permet d'avoir un code dont la décomposition est plus lisible
# par exemple
round(mean(df_1$imc, na.rm = TRUE), digits = 1)
# est équivalent à  :
df_1$imc |>
mean(na.rm = TRUE) |>
round(digits = 1)
# il est possible de placer l'élément à gauche du pipe à un autre argument
# dans la fonction à droite du pipe avec un "placeholder" underscore _
# x |> f(y, argument = _)     est équivalent à f(y, argument = x)
paste0("la moyenne de l'IMC est ",
round(mean(df_1$imc, na.rm = TRUE), digits = 1),
" kg/m2")
# est équivalent à  :
df_1$imc |>
mean(na.rm = TRUE) |>
round(digits = 1) |>
paste0("la moyenne de l'IMC est ",
a = _, # ne fonctionne pas si on indique "_" seul, il faut un format d'argument "a = _"
" kg/m2")
# ---------------------------------------------------------------------------- #
# 3) description simple des paramètres des distributions ----
# ---------------------------------------------------------------------------- #
# la fonction within() peut modifier un data frame et retourner le data frame modifié
# on peut le faire variable par variable
df_1.bis <- within(df_1, # au sein de la base df_1
sexL <- factor(sex, # pas besoin du $
labels = meta_df_1$labs[meta_df_1$var == "sex"]))
# df_1.bis <- within(df_1, # au sein de la base df_1
#                    sexL <- factor(sex, # pas besoin du $
#                                   labels = meta_df_1 |>
#                                     subset(var == "sex", labs)))
head(df_1.bis)
#   subjid sex  imc trait pas     sexL
# 1      1   0 24.8     2 140  Féminin
# 2      2   0 24.1     3 109  Féminin
# 3      3   0 26.4     1 156  Féminin
# 4      4   0 23.3     2 124  Féminin
# 5      5   0 25.4     2 131  Féminin
# 6      6   1 25.0     3 148 Masculin
df_1.bis <- within(df_1.bis, # on part du nouveau data.frame
traitL <- factor(trait,
labels = meta_df_1$labs[meta_df_1$var == "trait"]))
head(df_1.bis)
#   subjid sex  imc trait pas     sexL       traitL
# 1      1   0 24.8     2 140  Féminin Traitement A
# 2      2   0 24.1     3 109  Féminin Traitement B
# 3      3   0 26.4     1 156  Féminin      Placebo
# 4      4   0 23.3     2 124  Féminin Traitement A
# 5      5   0 25.4     2 131  Féminin Traitement A
# 6      6   1 25.0     3 148 Masculin Traitement B
# mais également créer plusieurs variables en même temps en mettant les expressions
# entre accolades {}
df_1 <- within(df_1, {
sexL <- factor(sex,
labels = meta_df_1$labs[meta_df_1$var == "sex"])
traitL <- factor(trait,
labels = meta_df_1$labs[meta_df_1$var == "trait"])
})
head(df_1) # à noter qu'il a terminé par la première commande sex !
df_1 |>
subset(select = c(sex, sexL)) |>
table()
df_1 |>
subset(select = c(trait, traitL)) |>
table()
df_1 |> summary()
df_1$imc |> length()
df_1$imc[!is.na(df_1$imc)] |> length()
length(df_1$imc[!is.na(df_1$imc)])
with(df_1, length(imc))
with(df_1, mean(imc))
with(df_1, mean(imc))
with(df_1,
imc |>
mean(na.rm = TRUE) |>
round(digits = 1) |>
paste0("la moyenne de l'IMC est ", a = _, " kg/m2"))
with(df_1,
imc |> mean(na.rm = TRUE))
with(df_1,
{ imc |> mean(na.rm = TRUE) # 24.481
pas |> mean(na.rm = TRUE)
})
with(df_1, imc |> mean(na.rm = TRUE)) # 24.481
with(df_1, pas |> mean(na.rm = TRUE)) # 24.481
with(df_1, imc |> sd(na.rm = TRUE)) # 24.481
with(df_1, pas |> sd(na.rm = TRUE)) # 137.1467
with(df_1, imc |> quantile(probs = c(0, 0.25, 0.5, 0.75, 1), na.rm = TRUE))
with(df_1, pas |> quantile(probs = c(0, 0.25, 0.5, 0.75, 1), na.rm = TRUE))
univ_quanti <- function(x, dig = 2, remove_miss = TRUE) {
n <- length(x[!is.na(x)])     # table(!is.na(x))["TRUE"]
moy <- mean(x, na.rm = remove_miss)
sd <- sd(x, na.rm = remove_miss)
q <- quantile(x, probs = c(0, 0.25, 0.5, 0.75, 1), na.rm = remove_miss)
# on stocke les résultat dans un vecteur de réels
param <- c(n,
round(moy, digits = dig),
round(sd, digits = dig),
q)
# on peut ajouter un nom à chaque élément du vecteur
names(param) <- c("N", "mean", "sd", "min", "Q1", "median", "Q3", "max")
return(param)
}
with(df_1,
imc |> univ_quanti(dig = 1, remove_miss = TRUE))
with(df_1,
pas |> univ_quanti(dig = 1, remove_miss = TRUE))
df_1 |>
subset(select = c(imc, pas)) |>
apply(MARGIN = 2,
FUN = univ_quanti,
dig = 1,
remove_miss = TRUE)
df_1 |>
subset(select = c(imc, pas)) |>
lapply(FUN = univ_quanti,
dig = 1, remove_miss = TRUE)
df_1 |>
subset(select = c(imc, pas)) |>
sapply(FUN = univ_quanti,
dig = 1, remove_miss = TRUE)
with(df_1, table())
with(df_1, table(sexL))
with(df_1,
prop.table(table(sexL)))
with(df_1,
cbind(table(sexL),
prop.table(table(sexL)) * 100 |>
round(digits = 1)))
tab_sex <- cbind(table(df_1$sexL),
round(prop.table(table(df_1$sexL)) * 100, digits = 1))
tab_sex
colnames(tab_sex) <- c("n", "pct")
tab_trait <- with(df_1,
cbind(table(traitL),
prop.table(table(traitL)) * 100 |>
round(digits = 1)))
colnames(tab_trait) <- c("n", "pct")
tab_trait
tab_trait <- cbind(table(df_1$traitL),
round(prop.table(table(df_1$traitL)) * 100, digits = 1))
colnames(tab_trait) <- c("n", "pct")
tab_trait
with(df_1,
cbind(table(traitL),
prop.table(table(traitL)) * 100 |>
round(digits = 1)))
with(df_1,
cbind(table(sexL),
prop.table(table(sexL)) * 100 |>
round(digits = 1)))
with(df_1,
cbind(table(traitL),
prop.table(table(traitL)) * 100 |>
round(digits = 1)))
colnames(tab_trait) <- c("n", "pct")
with(df_1,
cbind(table(traitL),
prop.table(table(traitL)) * 100 |>
round(digits = 1)))
tab_trait <- with(df_1,
cbind(table(traitL),
prop.table(table(traitL)) * 100))
with(df_1,
cbind(table(traitL),
prop.table(table(traitL)) * 100))
with(df_1,
cbind(table(traitL),
prop.table(table(traitL)) * 100 |>
round(digits = 1)))
tab_trait <- with(df_1,
cbind(table(traitL),
prop.table(table(traitL)) * 100 |>
round(digits = 1)))
colnames(tab_trait) <- c("n", "pct")
with(df_1,
imc |> hist(xlab = "IMC (kg/m²)", main = "Histogramme de l'IMC"))
with(df_1,
pas |> hist(xlab = "PAS (mmHg)", main = "Histogramme de la PAS"))
with(df_1,
imc |> boxplot(main = "Boxplot de l'IMC", ylab = "IMC (kg/m²)"))
with(df_1,
pas |> boxplot(main = "Boxplot de la PAS", ylab = "PAS (mmHg)"))
with(df_1,
imc |> length())
with(df_1,
subset(!is.na(imc))) |> length(imc))
with(df_1,
{ imc |> mean(na.rm = TRUE) # 24.481
pas |> mean(na.rm = TRUE)
})
df_1 |>
subset(!is.na(imc)) |>
imc |>
length()
df_1 |>
subset(!is.na(imc))
df_1 |>
subset(!is.na(imc)) |>
length(imc)
df_1 |>
subset(!is.na(imc), select = c(imc)) |>
length()
df_1 |>
subset(!is.na(imc), select = c(imc))
df_1 |>
subset(subset == (!is.na(imc)), select = c(imc)) |>
length()
df_1 |>
subset(subset = (!is.na(imc)), select = c(imc)) |>
length()
df_1 |>
subset(subset = (!is.na(imc)), select = c(imc))
class(df_1 |>
subset(subset = (!is.na(imc)), select = c(imc)))
df_1 |>
subset(subset = (!is.na(imc))) |>
nrow()
with(df_1,
length(imc[!is.na(imc)]))
with(df_1,
table(sex) |> barplot())
with(df_1,
table(sex) |>
prop.table() |>
barplot())
with(df_1,
table(sex) |>
prop.table() |>
barplot(ylab = "Frequency",
main = "Diagramme en barres du traitement"))
meta_df_1$labs[meta_df_1$var == "sex"]
with(df_1,
table(sex) |>
prop.table() |>
barplot(ylab = "Frequency",
xlab = meta_df_1$labs[meta_df_1$var == "sex"],
main = "Diagramme en barres du traitement"))
with(df_1,
table(sex) |>
prop.table() |>
barplot(ylab = "Frequency",
xlab = list(meta_df_1$labs[meta_df_1$var == "sex"]),
main = "Diagramme en barres du traitement"))
list(meta_df_1$labs[meta_df_1$var == "sex"])
with(df_1,
table(sexL) |>
prop.table() |>
barplot(ylab = "Frequency",
main = "Diagramme en barres du traitement"))
with(df_1,
table(sex) |>
prop.table() |>
barplot()) # avec les pourcentages
with(df_1,
boxplot(pas ~ sexL,
ylab = "PAS (mmHg)",
xlab = meta_df_1$label[meta_df_1$var == "sex" & meta_df_1$id_labs == 1],
main = "Boxplot de la PAS"))
with(df_1,
boxplot(pas ~ sexL,
ylab = "PAS (mmHg)",
# xlab = meta_df_1$label[meta_df_1$var == "sex" & meta_df_1$id_labs == 1],
main = "Boxplot de la PAS"))
with(df_1,
boxplot(pas ~ sexL,
ylab = "PAS (mmHg)",
xlab = meta_df_1$label[meta_df_1$var == "sex" & meta_df_1$id_labs == 1],
main = "Boxplot de la PAS"))
with(df_1,
boxplot(pas ~ traitL,
ylab = "PAS (mmHg)",
xlab = meta_df_1$label[meta_df_1$var == "trait" & meta_df_1$id_labs == 1],
main = "Boxplot de la PAS"))
### Croiser deux variables quantitatives
with(df_1,
plot(pas ~ imc,
xlab = "IMC (kg/m²)", ylab = "PAS (mmHg)",
main = "Nuage de points de la PAS en fonction de l'IMC"))
df_1 |>
subset(subset = c(sex == "Féminin" & trait == "Placebo")) |>
points(pas ~ imc,
col = "indianred3",
pch = 4)
df_1 |>
plot(pas ~ imc, data = _,
xlab = "IMC (kg/m²)", ylab = "PAS (mmHg)",
main = "Nuage de points de la PAS en fonction de l'IMC")
with(df_1,
aggregate(x = imc,
by = list(sexL),
FUN = mean,
simplify = TRUE))
aggregate(x = df_1[,c("imc", "pas")],
by = list(df_1$sexL),
FUN = mean,
simplify = TRUE)
with(df_1,
aggregate(x = c(imc, pas),
by = list(sexL),
FUN = mean,
simplify = TRUE))
with(df_1,
aggregate(x = list(imc, pas),
by = list(sexL),
FUN = mean,
simplify = TRUE))
aggregate(x = df_1[,c("imc", "pas")],
by = list(df_1$sexL),
FUN = mean,
simplify = TRUE)
with(df_1,
aggregate(x = list(imc = imc, pas = pas),
by = list(sexL),
FUN = mean,
simplify = TRUE))
with(df_1,
aggregate(x = list("imc", "pas"),
by = list(sexL),
FUN = mean,
simplify = TRUE))
with(df_1,
aggregate(x = list(imc = imc, pas = pas),
by = list(sexL),
FUN = mean,
simplify = TRUE))
aggregate(x = df_1[,c("imc", "pas")],
by = list(df_1$sexL),
FUN = mean,
simplify = TRUE)
univ_quanti <- function(x, dig = 2, remove_miss = TRUE, quantiles = TRUE) {
n <- length(x[!is.na(x)])     # table(!is.na(x))["TRUE"]
moy <- mean(x, na.rm = remove_miss)
sd <- sd(x, na.rm = remove_miss)
q <- quantile(x, probs = c(0, 0.25, 0.5, 0.75, 1), na.rm = remove_miss)
# on stocke les résultat dans un vecteur de réels
if (quantiles == TRUE) {
param <- c(n,
round(moy, digits = dig),
round(sd, digits = dig),
q)
} else {
param <- c(n,
round(moy, digits = dig),
round(sd, digits = dig))
}
# on peut ajouter un nom à chaque élément du vecteur
if (quantiles == TRUE) {
names(param) <- c("N", "mean", "sd", "min", "Q1", "median", "Q3", "max")
} else {
names(param) <- c("N", "mean", "sd")
}
# retourne les résultats
return(param)
}
df_1 |> univ_quanti(dig = 1, remove_miss = TRUE, quantiles = TRUE)
with(df_1,
imc |> univ_quanti(dig = 1, remove_miss = TRUE, quantiles = TRUE))
with(df_1,
imc |> univ_quanti(dig = 1, remove_miss = TRUE, quantiles = FALSE))
aggregate(x = imc,
by = list(df_1$sexL),
FUN = univ_quanti, # fonction à utiliser
dig = 1, remove_miss = TRUE, quantiles = FALSE)
with(df_1,
aggregate(x = imc,
by = list(sexL),
FUN = univ_quanti, # fonction à utiliser
dig = 1, remove_miss = TRUE, quantiles = FALSE)
)
imc_by_sex <- with(df_1,
aggregate(x = imc,
by = list(sexL),
FUN = univ_quanti, # fonction à utiliser
dig = 1, remove_miss = TRUE, quantiles = FALSE))
imc_by_sex
pas_by_sex <- with(df_1,
aggregate(x = pas,
by = list(sexL),
FUN = univ_quanti, # fonction à utiliser
dig = 1, remove_miss = TRUE, quantiles = FALSE))
pas_by_sex
with(df_1,
tapply(X = imc,
INDEX = list(sexL),
FUN = univ_quanti, # fonction à utiliser
dig = 1, remove_miss = TRUE, quantiles = FALSE))
imc_by_sex.bis <- with(df_1,
tapply(X = imc,
INDEX = list(sexL),
FUN = univ_quanti, # fonction à utiliser
dig = 1, remove_miss = TRUE, quantiles = FALSE))
imc_by_sex.bis
### 1ers exemples d'analyse de base de données :
rm(list = ls())
# ---------------------------------------------------------------------------- #
# 1) Importer les bases ----
# ---------------------------------------------------------------------------- #
df_1 <- read.csv2("data/df_1.csv")
meta_df_1 <- read.csv2("data/meta_df_1.csv")
meta_df_1
#      var               label id_labs code_labs         labs
# 1 subjid Identifiant patient       1        NA
# 2    sex                Sexe       1         0      Féminin
# 3    sex                Sexe       2         1     Masculin
# 4    imc         IMC (kg/m²)       1        NA
# 5  trait          Traitement       1         1      Placebo
# 6  trait          Traitement       2         2 Traitement A
# 7  trait          Traitement       3         3 Traitement B
# 8    pas          PAS (mmHg)       1        NA
# ---------------------------------------------------------------------------- #
# 2) Jeter un oeil à la base de données ----
# ---------------------------------------------------------------------------- #
head(df_1)
#   subjid sex  imc trait pas
# 1      1   0 24.8     2 140
# 2      2   0 24.1     3 109
# 3      3   0 26.4     1 156
# 4      4   0 23.3     2 124
# 5      5   0 25.4     2 131
# 6      6   1 25.0     3 148
tail(df_1)
#     subjid sex  imc trait pas
# 295    295   1 24.1     1 148
# 296    296   0 18.7     3 121
# 297    297   0 23.3     3 111
# 298    298   1 27.5     3 134
# 299    299   1 24.7     2 158
# 300    300   1 22.8     1 147
View(df_1)
str(df_1)
# 'data.frame':	300 obs. of  6 variables:
# $ X     : int  1 2 3 4 5 6 7 8 9 10 ...
# $ subjid: int  1 2 3 4 5 6 7 8 9 10 ...
# $ sex   : int  0 0 0 0 0 1 0 0 0 0 ...
# $ imc   : num  24.8 24.1 26.4 23.3 25.4 25 25.2 21.5 21.8 25.9 ...
# $ trait : int  2 3 1 2 2 3 3 3 1 1 ...
# $ pas   : int  140 109 156 124 131 148 125 117 132 133 ...
# ---------------------------------------------------------------------------- #
## 2.1) créer une nouvelle variable imc en classes ----
# ---------------------------------------------------------------------------- #
df_1$obesite <- ifelse(df_1$imc >= 30, 1, 0)
min(df_1$imc[dif_1$obesite == 0])
min(df_1$imc[df_1$obesite == 0])
max(df_1$imc[df_1$obesite == 0])
min(df_1$imc[df_1$obesite == 1])
max(df_1$imc[df_1$obesite == 1])
df_1$imc_cl <- rep(NA, nrow(df_1))
df_1$imc_cl[df_1$imc < 18.5] <- 1
df_1$imc_cl[df_1$imc >= 18.5 & df_1$imc < 25] <- 2
df_1$imc_cl[df_1$imc >= 25 & df_1$imc < 30] <- 3
df_1$imc_cl[df_1$imc >= 30] <- 4
boxplot(df_1$imc ~ df_1$imc_cl)
head(df_1)
head(df_1[,-c("imc_cl")])
head(df_1[,-c(imc_cl)])
names(df_1)
head(df_1[,-c(7)])
df_1 <- df_1[,-c(7)]
df_1$imc_cl <- ifelse(df_1$imc < 18.5, 1,
ifelse(df_1$imc >= 18.5 & df_1$imc < 25, 2),
ifelse(df_1$imc >= 25 & df_1$imc < 30, 3, 4))
df_1$imc_cl <- ifelse(df_1$imc < 18.5, 1,
ifelse(df_1$imc >= 18.5 & df_1$imc < 25,
2, ifelse(df_1$imc >= 25 & df_1$imc < 30, 3, 4)))
boxplot(df_1$imc ~ df_1$imc_cl) # ok pas de chevauchement
df_1$imc_cl <- (1 * (df_1$imc < 18.5) +
2 * (df_1$imc >= 18.5 & df_1$imc < 25) +
3 * (df_1$imc >= 25 & df_1$imc < 30) +
4 * (df_1$imc >= 30))
boxplot(df_1$imc ~ df_1$imc_cl) # ok pas de chevauchement
df_2 <- df_1 # on créer une base df_2, comme un double de la baes df_1
head(df_2)
df_2$pas[df_2$subjid == 137]
df_2$pas[df_2$subjid == 137] <- 123
df_2$pas[df_2$subjid == 137]
df_2[df_2$subjid %in% 130:137,]
df_2[df_2$subjid %in% 130:140,]
df_2[df_2$subjid %in% 135:140,]
