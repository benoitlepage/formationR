vect_dt_time <- as.POSIXct(c("1970-01-01 01:30", "1971-01-02 00:00"),
tz = "UTC")
as.double(vect_dt_time)
60 * 90
attr(vect_dt_time, "tzone") <- "Europe/Paris"
vect_dt_time
vect_dt_time <- as.POSIXct(c("1970-01-01 01:30", "1971-01-02 00:00"),
tz = "UTC") # pour le fuseau du méridien de Greenwich
vect_dt_time
NA < 10
TRUE & NA
FALSE & NA
!NA
TRUE | NA
FALSE | NA
sex <- c(1, 1, 2, 1, 2, 2)
names(sex) <- c("homme", "homme", "femme", "homme", "femme", "femme")
sex
attr(sex, "names")
attr(sex, "var_name") <- c("Sexe du participant")
sex
attributes(sex)
fact_1 <- factor(c("univ", "bac", "bac", "lycée", "univ", "lycée", "bac"))
fact_1
str(fact_1)
fact_2 <- factor(c(0, 1, 0, -1, 0, 0, -1, 1, -1, 0, 1, 1))
fact_2
?base::which
vect_test <- c(1.5, 5.83, 3.2, 15, 9.99)
which(vect_test > 8)
which(vect_test > 5)
match(vect_test, c(1.5, 15))
any(vect_test < 3)
all(vect_test < 3)
all(vect_test > 1)
View(vect_test)
vect_test > 5
vect_test <- c(1.5, 5.83, 3.2, 15, 9.99)
vect_test[4]
vect_test[c(1, 2, 5)]
vect_test[3:5]
vect_test[c(5, 1, 2)]
vect_test[c(-1, 2, 5)]
vect_test[-c(1, 2, 5)]
sex <- c(1, 1, 2, 1, 2, 2)
names(sex) <- c("homme", "homme", "femme", "homme", "femme", "femme")
sex
vect_bizarre <- c(1, 2, 3, 4, 5)
names(vect_bizarre) <- c("un", "trois", "douze", "douze", "2")
vect_bizarre
sex["homme"]
sex[c("homme","homme","homme")]
sex[c("homme","homme","homme","homme")]
sex_char <- c("homme", "homme", "femme", "homme", "femme", "femme")
sex_char
sex_char["homme"]
sex_char[whic("homme")]
sex_char[which("homme")]
sex_char[which(sex_char == "homme")]
which(sex_char == "homme")
names(sex)
names(sex) == "homme"
vect_bizarre["douze"]
vect_bizarre[c("douze","douze")]
vect_bizarre
vect_bizarre[c("un", "trois")]
vect_bizarre["douze"]
sex_char <- c("homme", "homme", "femme", "homme", "femme", "femme")
sex_char
names(sex_char)
sex_char["homme"]
sex[-c("homme")]
sex
sex[-c("homme", "homme", "homme")]
vect_test
vect_test <- c(1.50, 5.83, 3.20, 15.00, 9.99)
vect_test[c(TRUE, FALSE, TRUE, TRUE, FALSE)]
vect_test[vect_test > 5]
vect_test[c(5.83, 9.99) %in% vect_test]
c(5.83, 9.99) %in% vect_test
vect_test == 5.83 | vect_test == 9.99
vect_test == 5.83
vect_test == 9.99
vect_test[vect_test == 5.83 | vect_test == 9.99]
vect_test[vect_test %in% c(5.83, 9.99)]
vect_test[c(T,F,T)]
vect_test
vect_test[c(TRUE, FALSE, TRUE)]
vect_test[c(TRUE, FALSE, TRUE)]
vect_test[c(TRUE, FALSE, TRUE, TRUE, FALSE, TRUE)]
vect_test <- c(1.5, 5.83, 3.2, 15, 9.99)
vect_test[c(1, 3, 8, 9)]
var_quanti <- c(4.5, 2.0, 5.5, 10.4, 8.7, NA, 3.2, 4.0, 1.3, NA, 5.7)
length(var_quanti)
var_quanti <- c(4.5, 2.0, 5.5, 10.4, 8.7, NA, 3.2, 4.0, 1.3, NA, 5.7, 1.7)
mean(var_quanti)
sd(var_quanti)
var(var_quanti)
mean(var_quanti, na.rm = TRUE)
sd(var_quanti, na.rm = TRUE)
var(var_quanti, na.rm = TRUE)
min(var_quanti, na.rm = TRUE)
max(var_quanti, na.rm = TRUE)
median(var_quanti, na.rm = TRUE)
quantile(var_quanti, probs = c(0, 0.25, 0.5, 0.75, 1), na.rm = TRUE)
sum(var_quanti, na.rm = TRUE)
prod(var_quanti, na.rm = TRUE)
mean((var_quanti - mean(var_quanti, na.rm = TRUE)) / 9)
mean((var_quanti[!is.na(var_quanti)] - mean(var_quanti, na.rm = TRUE)) / 9)
sum((var_quanti[!is.na(var_quanti)] - mean(var_quanti, na.rm = TRUE)))^2) / 9
sum((var_quanti[!is.na(var_quanti)] - mean(var_quanti, na.rm = TRUE))^2) / 9
var
sd
var_quali1 <- c(1, 3, NA, 2, 3, 1, 2, NA, 2, 3, 1, 2, 2)
var_quali2 <- c("homme", "homme", NA, "femme", "homme", "femme", "femme", NA,
"homme", "femme", "femme", "homme", "femme")
var_quali3 <- factor(c("collège", "univ", "bac", "bac", "univ", NA, "collège",
"bac", "bac", "collège", NA, "univ"),
levels = c("primaire", "collège", "bac", "univ"))
var_quali1
var_quali2
var_quali3
table(var_quali1)
?quantile()
table(var_quali2)
table(var_quali3)
table(as.character(var_quali3))
??proportion.table
prop.table(table(var_quali1))
prop.table(table(var_quali2))
prop.table(table(var_quali3))
table(var_quali2, useNA = "ifany")
proportions(table(var_quali2, useNA = "ifany"))
table(var_quali2, useNA = "always")
table(var_quali2[!is.na(var_quali2)], useNA = "always")
table(c("homme", "homme", "femme", "homme", "femme", "femme",
"homme", "femme", "femme", "homme", "femme"),
useNA = "always")
var_quali <- c("homme", "home", NA, "femme", "homme", "femme", "femme", NA,
"homme", "femme", "Femme", "homme", "femme")
unique(var_quali)
quantile(var_quanti, probs = c(0, 0.25, 0.5, 0.75, 1), na.rm = TRUE)
quantile(var_quanti, probs = c(0, 0.25, 0.5, 0.75, 1), na.rm = TRUE, type = 6)
var_quali1 <- c(0, 2, NA, 1, 2, 0, 1, NA, 1, 2, 0, 1, 1)
table(var_quali1)
prop.table(table(var_quali1))
typeof(1:10)
exemple_list <- list(1:10, # un vecteur séquentiel d'entiers, de longueur 10
c(1.5, pi, 14, 6.48), # un vecteur de réels
c("aa", "hello", "TOULOUSE"), # un vecteur de caractères
c(TRUE, TRUE, FALSE, TRUE, FALSE, FALSE, FALSE), # logique
matrix(data = 1:10, nrow = 5, ncol = 2), # un matrice
data.frame(id = 1:10,
sex = c(1,2,1,1,1,2,2,1,2,2),
age = c(49,23,43,50,40,37,20,47,26,44)))
exemple_list
class(exemple_list)
length(exemple_list)
attributes(exemple_list)
names(exemple_list) <- c("vect_int", "vect_dbl", "vect_char", "vect_logic",
"mat", "df")
names(exemple_list)
attributes(exemple_list)
exemple_list
typeof(exemple_list)
exemple_list[[c(1, 2, 5)]]
exemple_list[c(1, 2, 5)]
exemple_list[5]
exemple_list$vect_dbl
exemple_list[5]
exemple_list[[5]]
exemple_list$vect_dbl
exemple_list[c(1, 2, 5)]
vect_test <- c(1.50, 5.83, 3.20, 15.00, 9.99)
vect_test[c(2, 5)] <- c(2, NA)
vect_test
exemple_list[c("vect_int", "vect_dbl", "mat")]
exemple_list[[c("vect_int", "vect_dbl", "mat")]]
rm(list=ls())
vect_dbl <- 1:10
dim(vect_dbl) <- c(3,3)
seq_1a15 <- 1:15
seq_1a15
dim(seq_1a15) <- c(5, 3)
seq_1a15
typeof(seq_1a15)
class(seq_1a15
)
class(seq_1a15)
seq_1a15 <- 1:15
seq_1a15
# [1]  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15
class(seq_1a15)
dim(seq_1a15) <- c(5, 3)
seq_1a15
#      [,1] [,2] [,3]
# [1,]    1    6   11
# [2,]    2    7   12
# [3,]    3    8   13
# [4,]    4    9   14
# [5,]    5   10   15
class(seq_1a15)
dim(seq_1a15) <- c(3, 3) # matrice de 3 lignes et 3 colonnes = 9 valeurs
dim(seq_1a15) <- c(4, 4)
dim(seq_1a15) <- c(7, 2)
seq_1a15 <- 1:15
dim(seq_1a15) <- c(5, 3)
seq_1a15
rownames(seq_1a15) <- c("id_1", "id_2", "id_3", "id_4", "id_5")
colnames(seq_1a15) <- c("aa", "bb", "cc")
seq_1a15
attributes(seq_1a15)
mat <- matrix(1:15, # le vecteur de valeurs à utiliser
nrow = 5, # 5 lignes
ncol = 3, # 3 colonnes
byrow = FALSE,  # range les valeur par colonne (pas par rang)
dimnames = list(c("id_1", "id_2", "id_3", "id_4", "id_5"),
c("aa", "bb", "cc")))
mat
attributes(mat)
mat2 <- matrix(1:15, # le vecteur de valeurs à utiliser
nrow = 5, # 5 lignes
ncol = 3, # 3 colonnes
byrow = TRUE,  # range les valeur par rang +++
mat2
mat2 <- matrix(1:15, # le vecteur de valeurs à utiliser
nrow = 5, # 5 lignes
ncol = 3, # 3 colonnes
byrow = TRUE)  # range les valeur par rang +++
mat2
seq_1a15 <- 1:15
seq_1a15
# [1]  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15
class(seq_1a15)
# [1] "integer"
## on va créer une matrice de dimensions (5, 3) en ajoutant un attribut de
## dimensions avec la fonction dim()
dim(seq_1a15) <- c(5, 3)
seq_1a15
#      [,1] [,2] [,3]
# [1,]    1    6   11
# [2,]    2    7   12
# [3,]    3    8   13
# [4,]    4    9   14
# [5,]    5   10   15
class(seq_1a15)
attributes(seq_1a15)
fact_1bis <- factor(c("univ", "bac", "bac", "lycée", "univ", "lycée", "bac"),
levels = c("lycée", "bac", "univ"))
attributes(fact_1bis)
class(attributes(fact_1bis))
length(attributes(fact_1bis))
seq_1a30 <- 1:30
dim(seq_1a30) <- c(5, 3, 2)
seq_1a30
class(seq_1a30)
attributes(seq_1a30)    # le vecteur seq_1a15 a un nouvel attribut nommé "dim"
is.list(seq_1a30)
mat1
mat1 <- matrix(1:15, # le vecteur de valeurs à utiliser
nrow = 5, # 5 lignes
ncol = 3, # 3 colonnes
byrow = FALSE,  # range les valeur par colonne (pas par rang)
dimnames = list(c("id_1", "id_2", "id_3", "id_4", "id_5"),
c("aa", "bb", "cc")))
mat1
mat1
mat1[3,2]
mat1[3,]
mat1[,2]
mat1[3:5, c(1,3)]
mat1
mat1["id_3", "bb"]
mat1[c("id_3", "id_4", "id_5"), c("aa", "cc")]
seq_1a30 <- 1:30
## on va créer un array de dimensions (5, 3, 2) en ajoutant un attribut de
## dimensions avec la fonction dim()
dim(seq_1a30) <- c(5, 3, 2)
seq_1a30
class(seq_1a30)
dimnames(seq_1a30) <- list(noms_rang = c("id_1", "id_2", "id_3", "id_4", "id_5"),
noms_col = c("aa", "bb", "cc"),
noms_mat = c("mat_1", "mat_2")))
dimnames(seq_1a30) <- list(noms_rang = c("id_1", "id_2", "id_3", "id_4", "id_5"),
noms_col = c("aa", "bb", "cc"),
noms_mat = c("mat_1", "mat_2"))
attributes(seq_1a30)
seq_1a30
seq_1a30[4,3,2]
seq_1a30[4,,]
seq_1a30
seq_1a30[4,,]
seq_1a30[,3,]
seq_1a30[,,2]
seq_1a30
mat1[c(FALSE, FALSE, TRUE, FALSE, FALSE), c(FALSE, TRUE, FALSE)]
mat1[c(FALSE, FALSE, TRUE, FALSE, FALSE),]
mat1[, c(FALSE, TRUE, FALSE)]
mat1[c(FALSE, FALSE, TRUE, TRUE, TRUE), c(TRUE, FALSE, TRUE)]
mat1[3,2, drop = FALSE]
dim(mat1[3,2, drop = FALSE])
dim(mat1[3,2])
mtcars
mtcars[mtcars$cyl = 4, ]
mtcars[mtcars$cyl == 4, ]
mtcars[-1:4, ]
mtcars[-c(1:4), ]
mtcars[mtcars$cyl <= 5]
mtcars[mtcars$cyl <= 5,]
mtcars[mtcars$cyl == 4 | 6, ]
mtcars[mtcars$cyl == 4 | 6, ]
mtcars[mtcars$cyl %in% c(4,6), ]
mtcars$cyl == 4 | 6
mtcars$cyl == 4
exemple_list
exemple_list <- list(1:10, # un vecteur séquentiel d'entiers, de longueur 10
c(1.5, pi, 14, 6.48), # un vecteur de réels
c("aa", "hello", "TOULOUSE"), # un vecteur de caractères
c(TRUE, TRUE, FALSE, TRUE, FALSE, FALSE, FALSE), # logique
matrix(data = 1:10, nrow = 5, ncol = 2), # un matrice
data.frame(id = 1:10,                # une base de données
sex = c(1,2,1,1,1,2,2,1,2,2),
age = c(49,23,43,50,40,37,20,47,26,44)))
exemple_list
names(exemple_list) <- c("vect_int", "vect_dbl", "vect_char", "vect_logic",
"mat", "df")
attributes(exemple_list)
exemple_list
exemple_list[[5]]
exemple_list$vect_dbl
exemple_list[["vect_dbl"]]
mat1 <- matrix(1:15, # le vecteur de valeurs à utiliser
nrow = 5, # 5 lignes
ncol = 3, # 3 colonnes
byrow = FALSE,  # range les valeur par colonne (pas par rang)
dimnames = list(c("id_1", "id_2", "id_3", "id_4", "id_5"),
c("aa", "bb", "cc")))
mat1
#      aa bb cc
# id_1  1  6 11
# id_2  2  7 12
# id_3  3  8 13
# id_4  4  9 14
# id_5  5 10 15
attributes(mat1)
# $dim
# [1] 5 3
#
# $dimnames
# $dimnames[[1]]
# [1] "id_1" "id_2" "id_3" "id_4" "id_5"
#
# $dimnames[[2]]
# [1] "aa" "bb" "cc"
## on peut choisir de ranger les valeurs par rang plutôt que par colonne :
mat2 <- matrix(1:15, # le vecteur de valeurs à utiliser
nrow = 5, # 5 lignes
ncol = 3, # 3 colonnes
byrow = TRUE)  # range les valeur par rang +++
mat2
#       [,1] [,2] [,3]
# [1,]    1    2    3
# [2,]    4    5    6
# [3,]    7    8    9
# [4,]   10   11   12
# [5,]   13   14   15
rbind(mat1, mat2)
cbind(mat1, mat2)
rm(list=ls())
df <- data.frame(c(1:10),
c(42.5, 27.9, 60, 74.5, 38, 25.2, 53.4, 46.6, 34.2, 39.6),
c("M", "F", "F", "M", "M", "F", "M", "F", "F", "M"),
c("2025-12-08", "2025-02-04", "2022-04-22", "2023-10-29",
"2023-01-31", "2024-12-17", "2025-09-13", "2025-11-07",
"2022-04-25", "2023-08-02", "2025-05-21"))
df <- data.frame(id = c(1:10),
age = c(42.5, 27.9, 60, 74.5, 38, 25.2, 53.4, 46.6, 34.2, 39.6),
sex = c("M", "F", "F", "M", "M", "F", "M", "F", "F", "M"),
dt_vis = c("2025-12-08", "2025-02-04", "2022-04-22",
"2023-10-29", "2023-01-31", "2024-12-17",
"2025-09-13", "2025-11-07", "2022-04-25",
"2023-08-02", "2025-05-21"))
df <- data.frame(c(1:10),
c(42.5, 27.9, 60, 74.5, 38, 25.2, 53.4, 46.6, 34.2, 39.6),
c("M", "F", "F", "M", "M", "F", "M", "F", "F", "M"),
c("2025-12-08", "2025-02-04", "2022-04-22", "2023-10-29",
"2023-01-31", "2024-12-17", "2025-09-13", "2025-11-07",
"2022-04-25", "2023-08-02"))
df
View(df)
df <- data.frame(id = c(1:10),
age = c(42.5, 27.9, 60, 74.5, 38, 25.2, 53.4, 46.6, 34.2, 39.6),
sex = c("M", "F", "F", "M", "M", "F", "M", "F", "F", "M"),
dt_vis = c("2025-12-08", "2025-02-04", "2022-04-22",
"2023-10-29", "2023-01-31", "2024-12-17",
"2025-09-13", "2025-11-07", "2022-04-25",
"2023-08-02"))
df
head(df)
tail(df)
View(df)
attributes(df)
class(df)
is.list(df)
attributes(df)
names(df)
dim(df)
seq_1a30 <- 1:30
## on va créer un array de dimensions (5, 3, 2) en ajoutant un attribut de
## dimensions avec la fonction dim()
dim(seq_1a30) <- c(5, 3, 2)
seq_1a30
is.list(seq_1a30)
?datasets
??datasets
library(help = datasets)
library(help = "datasets")
Titanic
View(Titanic)
class(esoph)
esoph
iris
HairEyeColor
class(HairEyeColor)
UCBAdmissions
crimtab
lh
occupationalStatus
penguins
sleep
swiss
women
attributes(women)
class(women)
df <- data.frame(id = c(1:10),
age = c(42.5, 27.9, 60, 74.5, 38, 25.2, 53.4, 46.6, 34.2, 39.6),
sex = c("M", "F", "F", "M", "M", "F", "M", "F", "F", "M"),
dt_vis = c("2025-12-08", "2025-02-04", "2022-04-22",
"2023-10-29", "2023-01-31", "2024-12-17",
"2025-09-13", "2025-11-07", "2022-04-25",
"2023-08-02"))
df
#    id  age sex     dt_vis
# 1   1 42.5   M 2025-12-08
# 2   2 27.9   F 2025-02-04
# 3   3 60.0   F 2022-04-22
# 4   4 74.5   M 2023-10-29
# 5   5 38.0   M 2023-01-31
# 6   6 25.2   F 2024-12-17
# 7   7 53.4   M 2025-09-13
# 8   8 46.6   F 2025-11-07
# 9   9 34.2   F 2022-04-25
# 10 10 39.6   M 2023-08-02
## Les fonctions head() et tail() permettent de visualiser les premières
## et les dernières lignes d'une base de données
head(df)
#   id  age sex     dt_vis
# 1  1 42.5   M 2025-12-08
# 2  2 27.9   F 2025-02-04
# 3  3 60.0   F 2022-04-22
# 4  4 74.5   M 2023-10-29
# 5  5 38.0   M 2023-01-31
# 6  6 25.2   F 2024-12-17
tail(df)
#    id  age sex     dt_vis
# 5   5 38.0   M 2023-01-31
# 6   6 25.2   F 2024-12-17
# 7   7 53.4   M 2025-09-13
# 8   8 46.6   F 2025-11-07
# 9   9 34.2   F 2022-04-25
# 10 10 39.6   M 2023-08-02
## la fonction View() de R studio permet de visualiser la base de donnée
View(df)
## cet objet est de class "data.frame"
class(df)
## Un data.frame est bien un objet de format "list" :
is.list(df) # [1] TRUE
## Un data.frame est une liste qui possède des attributs de noms de variables
## de class et de noms de rangs :
attributes(df)
# $names
# [1] "id"     "age"    "sex"    "dt_vis"
#
# $class
# [1] "data.frame"
#
# $row.names
#  [1]  1  2  3  4  5  6  7  8  9 10
## On peut ainsi récupérer les noms des variables avec la fonction 'names()'
names(df)
# [1] "id"     "age"    "sex"    "dt_vis"
## l'attribut 'names' est un vecteur de caractère dont la longueur est égale
## au nombre de variables
## un data frame a 2 dimensions correspondant au nombre de lignes et de colonnes
## (comme une matrice)
dim(df)
# [1] 10  4          # il y a bien 10 lignes et 4 colonnes
df[[2]]
df[["age"]]
df$age
df[c(2, 4, 9), c("age", "sex")]
df[c(2, 4, 9), c(2, 3)]
df[c("2", "4", "9"), c("age", "sex")]
df[df$sex == "F",]
df[df$sex == "F" & df$age > 50,]
df[df$sex == "F" & df$age > 40,]
subset(df, subset == c(2, 4, 9), select = c(2, 3))
subset(df,
subset = c(sex == "F" & age > 40),
select = c(id, age, sex))
View(df)
df[df$sex == "F" & df$age > 40, c("age", "sex")]
