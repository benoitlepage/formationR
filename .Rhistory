with(df_1,
pas |> ttest(sexL))
with(df_1,
pas |> t.test(sexL))
with(df_1,
t.test(x = pas, y = sexL))
with(df_1,
t.test(x = pas, y = sex))
with(df_1,
pas |> t.test(sex))
with(df_1,
pas |>
t.test(sex) |>
p.value)
with(with(df_1,
pas |> t.test(y = sex)), p.value)
with(df_1,
pas |> car::leveneTest(group = sexL))
with(df_1,
pas |> wilcox.test(y = sexL))
with(df_1,
pas |> wilcox.test(y = sex))
wilcox.test(data = df_1, pas ~ sex)
with(df_1,
wilcox.test(pas ~ sex))
with(df_1,
wilcox.test(pas ~ sexL))
with(df_1,
pas |> t.test(y = sex))
with(with(df_1,
t.test(pas ~sex)),
p.value)
with(df_1,
pas |> t.test(y = sex))
with(df_1,
t.test(pas ~ sexL))
with(with(df_1,
t.test(pas ~ sexL)),
p.value)
with(df_1,
lm(pas ~ traitL) |>
anova())
with(df_1,
pas |> car::leveneTest(group = traitL))
with(with(df_1,
lm(pas ~ traitL)),
residuals |> qqnorm())
with(with(df_1,
lm(pas ~ traitL)),
residuals |> qqline())
plot(df_1$imc, df_1$pas)
with(with(df_1,
lm(pas ~ traitL)),
residuals |> qqline())
with(with(df_1,
lm(pas ~ traitL)),
residuals |>
function() {qqnorm() qqline()})
with(with(df_1,
lm(pas ~ traitL)),
residuals |>
function(x) {qqnorm(x) qqline(x)})
qqline(residuals(lm(pas ~ traitL, data = df_1)))
qqnorm(residuals(lm(pas ~ traitL, data = df_1)))
qqline(residuals(lm(pas ~ traitL, data = df_1)))
with(with(df_1,
lm(pas ~ traitL)),
residuals |> qqnorm() )
qqline()
with(with(with(df_1,
lm(pas ~ traitL)),
residuals |> qqnorm() ),
qqline())
res <- with(with(df_1, lm(pas ~ traitL)),
residuals)
qqnorm(res)
qqline(res)
with(df_1,
kruskal.test(pas ~ traitL))
df_1 |> table(sexL, traitL)
names(df_1 |> table(sexL, traitL))
names(df_1
)
with(df_1, table(sexL, traitL))
with(df_1, prop.table(table(sexL, traitL)))
tb_n <- with(df_1, table(sexL, traitL))
tb_pct <- with(df_1, prop.table(table(sexL, traitL)))
paste0(tb_n, "(", round(tb_pct * 100, digits = 1), "%)")
with(df_1, {
param_imc <- imc |>
univ_quanti(dig = 1, remove_miss = TRUE, quantiles = TRUE)
param_pas <- pas |>
pas |> univ_quanti(dig = 1, remove_miss = TRUE, quantiles = TRUE)
rbind(param_imc, param_pas)
}
)
with(df_1,)
with(df_1,
sapply(list(imc, pas),
mean()))
with(df_1,
list(imc |> univ_quanti(dig = 1, remove_miss = TRUE, quantiles = TRUE),
pas |> univ_quanti(dig = 1, remove_miss = TRUE, quantiles = TRUE))
)
with(df_1,
list(imc = univ_quanti(imc, dig = 1, remove_miss = TRUE, quantiles = TRUE),
pas = univ_quanti(pas, dig = 1, remove_miss = TRUE, quantiles = TRUE))
)
with(df_1,
cbind(N = table(sexL),
pct = round(prop.table(table(sexL)) * 100, digits = 1),
deparse.level = 2)) # ajoute des noms de colonnes avec "N" et "pct"
with(df_1,
cbind(N = table(traitL),
pct = round(prop.table(table(traitL)) * 100, digits = 1),
deparse.level = 2))
with(df_1,
list(SEX = cbind(N = table(sexL),
pct = round(prop.table(table(sexL)) * 100, digits = 1),
deparse.level = 2), # ajoute les noms de colonnes
TRAITEMENT = cbind(N = table(traitL),
pct = round(prop.table(table(traitL)) * 100, digits = 1),
deparse.level = 2)))
tb_n <- with(df_1, table(sexL, traitL))
tb_pct <- with(df_1, prop.table(table(sexL, traitL)))
tab_biv_quali <- paste0(tb_n, "(", round(tb_pct * 100, digits = 1), "%)")
dim(tab_biv_quali) <- dim(sex_by_trait_N)
dim(tab_biv_quali) <- dim(tb_n)
dimnames(tab_biv_quali) <- dimnames(tb_n)
tab_biv_quali
tb_n <- with(df_1, table(sexL, traitL))
tb_pct <- with(df_1, prop.table(table(sexL, traitL)))
tab_biv_quali <- paste0(tb_n, "(", round(tb_pct * 100, digits = 1), "%)")
dim(tab_biv_quali) <- dim(tb_n)
dimnames(tab_biv_quali) <- dimnames(tb_n)
tab_biv_quali
with(df_1,
rbind(aggregate(imc,
by = list(sexL),
FUN = univ_quanti, # fonction à utiliser
dig = 1, remove_miss = TRUE, quantiles = FALSE)) )
with(df_1,
rbind(PAS = aggregate(imc,
by = list(sexL),
FUN = univ_quanti, # fonction à utiliser
dig = 1, remove_miss = TRUE, quantiles = FALSE)) )
with(df_1,
list(PAS = aggregate(imc,
by = list(sexL),
FUN = univ_quanti, # fonction à utiliser
dig = 1, remove_miss = TRUE, quantiles = FALSE)) )
with(df_1,
list(IMC = cbind(t(aggregate(imc,
by = list(sexL),
FUN = univ_quanti, # fonction à utiliser
dig = 1, remove_miss = TRUE, quantiles = FALSE)),
p.value = c(t.test(pas ~ sexL)$p.value, NA, NA))
) )
with(df_1,
t(aggregate(imc,by = list(sexL),
FUN = univ_quanti, # fonction à utiliser
dig = 1, remove_miss = TRUE, quantiles = FALSE)))
class(with(df_1,
t(aggregate(imc,by = list(sexL),
FUN = univ_quanti, # fonction à utiliser
dig = 1, remove_miss = TRUE, quantiles = FALSE))))
with(df_1,
tapply(imc,
INDEX = sexL,
FUN = paste(mean(), " +/- ", sd()),
na.rm = TRUE))
with(df_1,
list(IMC = cbind(t(aggregate(imc,
by = list(sexL),
FUN = univ_quanti, # fonction à utiliser
dig = 1, remove_miss = TRUE, quantiles = FALSE)),
p.value = c(t.test(pas ~ sexL)$p.value, NA, NA))
) )
with(df_1,
tapply(X = imc,
INDEX = list(sexL),
FUN = univ_quanti,
dig = 1, remove_miss = TRUE, details = FALSE))
View(univ_quanti)
univ_quanti <- function(x, dig = 2, remove_miss = TRUE, details = TRUE) {
# calculer les effectifs, la moyenne, l'écart type et les quantiles
n <- length(x[!is.na(x)])
moy <- mean(x, na.rm = remove_miss)
sd <- sd(x, na.rm = remove_miss)
q <- quantile(x, probs = c(0, 0.25, 0.5, 0.75, 1), na.rm = remove_miss)
# stocker les résultat dans le vecteur "param"
if (quantiles == TRUE) {
param <- c(n,
round(moy, digits = dig),
round(sd, digits = dig),
q)
} else {
param <- c(n,
round(moy, digits = dig),
round(sd, digits = dig))
}
# ajouter un nom à chaque élément du vecteur
if (quantiles == TRUE) {
names(param) <- c("N", "mean", "sd", "min", "Q1", "median", "Q3", "max")
} else {
names(param) <- c("N", "mean", "sd")
}
# retourne les résultats
return(param)
}
with(df_1,
list(IMC = cbind(t(aggregate(imc,
by = list(sexL),
FUN = univ_quanti, # fonction à utiliser
dig = 1, remove_miss = TRUE, details = FALSE)),
p.value = c(t.test(pas ~ sexL)$p.value, NA, NA))
) )
with(df_1,
tapply(X = imc,
INDEX = list(sexL),
FUN = univ_quanti,
dig = 1, remove_miss = TRUE, details = FALSE))
univ_quanti
univ_quanti <- function(x, dig = 2, remove_miss = TRUE, details = TRUE) {
# calculer les effectifs, la moyenne, l'écart type et les quantiles
n <- length(x[!is.na(x)])
moy <- mean(x, na.rm = remove_miss)
sd <- sd(x, na.rm = remove_miss)
q <- quantile(x, probs = c(0, 0.25, 0.5, 0.75, 1), na.rm = remove_miss)
# stocker les résultat dans le vecteur "param"
if (details == TRUE) {
param <- c(n,
round(moy, digits = dig),
round(sd, digits = dig),
q)
} else {
param <- c(n,
round(moy, digits = dig),
round(sd, digits = dig))
}
# ajouter un nom à chaque élément du vecteur
if (details == TRUE) {
names(param) <- c("N", "mean", "sd", "min", "Q1", "median", "Q3", "max")
} else {
names(param) <- c("N", "mean", "sd")
}
# retourne les résultats
return(param)
}
with(df_1,
pas |>
aggregate(by = list(sexL),
FUN = univ_quanti, # fonction à utiliser
dig = 1, remove_miss = TRUE, details = FALSE))
with(df_1,
tapply(X = imc,
INDEX = list(sexL),
FUN = univ_quanti,
dig = 1, remove_miss = TRUE, details = FALSE))
cbind(with(df_1,
tapply(X = imc,
INDEX = list(sexL),
FUN = univ_quanti,
dig = 1, remove_miss = TRUE, details = FALSE)))
paste0(with(df_1,
tapply(X = imc,
INDEX = list(sexL),
FUN = univ_quanti,
dig = 1, remove_miss = TRUE, details = FALSE)))
with(df_1,
tapply(X = imc,
INDEX = list(sexL),
FUN = univ_quanti,
dig = 1, remove_miss = TRUE, details = FALSE) |>
paste0())
with(df_1,
tapply(X = imc,
INDEX = list(sexL),
FUN = univ_quanti,
dig = 1, remove_miss = TRUE, details = FALSE))
with(df_1,
tapply(X = c(imc, pas),
INDEX = list(sexL),
FUN = univ_quanti,
dig = 1, remove_miss = TRUE, details = FALSE))
with(df_1,
tapply(X = imc,
INDEX = list(sexL),
FUN = univ_quanti,
dig = 1, remove_miss = TRUE, details = FALSE))
with(df_1,
rbind(tapply(X = imc,
INDEX = list(sexL),
FUN = univ_quanti,
dig = 1, remove_miss = TRUE, details = FALSE)))
with(df_1,
cbind(tapply(X = imc,
INDEX = list(sexL),
FUN = univ_quanti,
dig = 1, remove_miss = TRUE, details = FALSE),
tapply(X = pas,
INDEX = list(sexL),
FUN = univ_quanti,
dig = 1, remove_miss = TRUE, details = FALSE)))
by(df_1,
INDICES = sexL,
mean(pas))
by(df_1,
INDICES = df_1$sexL,
mean(pas))
by(df_1,
INDICES = df_1$sexL,
mean(df_1$pas))
by(df_1,
INDICES = df_1$sexL,
FUN = mean(df_1$pas))
by(df_1[,c("imc", "pas")],
INDICES = df_1$sexL,
FUN = mean)
by(df_1[,c("imc")],
INDICES = df_1$sexL,
FUN = mean)
class(by(df_1[,c("imc")],
INDICES = df_1$sexL,
FUN = mean))
by(df_1[,c("imc", "pas")],
INDICES = df_1$sexL,
FUN = mean)
tb_n <- with(df_1, table(sexL, traitL))
tb_pct <- with(df_1, prop.table(table(sexL, traitL)))
tab_biv_quali <- paste0(tb_n, "(", round(tb_pct * 100, digits = 1), "%)")
dim(tab_biv_quali) <- dim(tb_n)
dimnames(tab_biv_quali) <- dimnames(tb_n)
tab_biv_quali
with(df1,
paste0(table(sexL, traitL),
" (",
prop.table(round(table(sexL, traitL) * 100, digits = 1)),
"%)"))
with(df_1,
paste0(table(sexL, traitL),
" (",
prop.table(round(table(sexL, traitL) * 100, digits = 1)),
"%)"))
tb_n <- with(df_1, table(sexL, traitL))
tb_pct <- with(df_1, prop.table(table(sexL, traitL)))
tab_biv_quali <- paste0(tb_n, "(", round(tb_pct * 100, digits = 1), "%)")
dim(tab_biv_quali) <- dim(tb_n)
dimnames(tab_biv_quali) <- dimnames(tb_n)
tab_biv_quali
with(df_1,
paste0(table(sexL, traitL),
" (",
round(prop.table(table(sexL, traitL)) * 100, digits = 1),
"%)")) |>
matrix(nrow = 2, ncol = 3, byrow = FALSE)
with(df_1,
paste0(table(sexL, traitL),
" (",
table(sexL, traitL) |>
prop.table() * 100 |>
round(digits = 1),
"%)"))
with(df_1,
paste0(table(sexL, traitL),
" (",
table(sexL, traitL) |>
prop.table(margin = 2) * 100 |>
round(digits = 1),
"%)"))
tb_n <- with(df_1, table(sexL, traitL))
tb_pct <- with(df_1, prop.table(table(sexL, traitL)))
tab_biv_quali <- paste0(tb_n, "(", round(tb_pct * 100, digits = 1), "%)")
dim(tab_biv_quali) <- dim(tb_n)
dimnames(tab_biv_quali) <- dimnames(tb_n)
tab_biv_quali
class(with(df_1,
paste0(table(sexL, traitL),
" (",
table(sexL, traitL) |>
prop.table(margin = 2) * 100 |>
round(digits = 1),
"%)")))
dim(with(df_1,
paste0(table(sexL, traitL),
" (",
table(sexL, traitL) |>
prop.table(margin = 2) * 100 |>
round(digits = 1),
"%)")))
with(df_1,
paste0(table(sexL, traitL),
" (",
table(sexL, traitL) |>
prop.table(margin = 2) * 100 |>
round(digits = 1),
"%)"))
with(df_1,
paste0(table(sexL, traitL),
" (",
table(sexL, traitL) |>
prop.table(margin = 2) * 100 |>
round(digits = 1),
"%)") |>
matrix(nrow = 2, ncol = 3, byrow = FALSE,
dimnames = dimnames(table(sexL, traitL))))
with(df_1,
table(sexL, traitL))
with(df_1,
table(sexL, traitL) |>
prop.table(margin = 2))
with(df_1,
table(sexL, traitL) |>
prop.table(margin = 2) * 100)
with(df_1,
table(sexL, traitL) |>
prop.table(margin = 2) * 100 |>
round(digits = 1))
with(df_1,
table(sexL, traitL) |>
prop.table(margin = 2) * 100 |>
round(x = _, digits = 1))
with(df_1,
table(sexL, traitL) |>
round(prop.table(margin = 2) * 100, digits = 1))
with(df_1,
table(sexL, traitL) |>
round(prop.table(x = _, margin = 2) * 100, digits = 1))
tb_n <- with(df_1, table(sexL, traitL))
tb_pct <- with(df_1, prop.table(table(sexL, traitL), margin = 2))
tab_biv_quali <- paste0(tb_n, "(", round(tb_pct * 100, digits = 1), "%)")
dim(tab_biv_quali) <- dim(tb_n)
dimnames(tab_biv_quali) <- dimnames(tb_n)
tab_biv_quali
with(df_1,
paste0(table(sexL, traitL),
" (",
table(sexL, traitL) |>
prop.table(margin = 2) * 100 |>
round(digits = 1),
"%)") |>
matrix(nrow = 2, ncol = 3, byrow = FALSE,
dimnames = dimnames(table(sexL, traitL))))
with(df_1,
paste0(table(sexL, traitL),
" (",
round(prop.table(table(sexL, trait)) * 100,
digits = 1),
"%)") |>
matrix(nrow = 2, ncol = 3, byrow = FALSE,
dimnames = dimnames(table(sexL, traitL))))
with(df_1,
paste0(table(sexL, traitL),
" (",
round(prop.table(table(sexL, trait), margin = 2) * 100,
digits = 1),
"%)") |>
matrix(nrow = 2, ncol = 3, byrow = FALSE,
dimnames = dimnames(table(sexL, traitL))))
with(df_1,
paste0(table(sexL, traitL),
" (",
table(sexL, traitL) |>
prop.table(margin = 2) * 100 |>
round(digits = 1),
"%)") |>
matrix(nrow = 2, ncol = 3, byrow = FALSE,
dimnames = dimnames(table(sexL, traitL))))
with(df_1,
list(test_chi2 = chisq.test(table(sexL, traitL)),
expected = chisq.test(table(sexL, traitL)$expected)))
with(df_1,
table(sexL, traitL) |>
chisq.test())
with(df_1,
table(sexL, traitL) |>
list(chisq.test(),
chisq.test()$expected))
with(with(df_1,
table(sexL, traitL) |>
chisq.test()),
expected)
with(df_1,
cor.test(imc, pas, method = "pearson"))
class(with(df_1,
cor.test(imc, pas, method = "pearson")))
as.list(with(df_1,
cor.test(imc, pas, method = "pearson")))
with(df_1,
cor.test(imc, pas, method = c("pearson", "spearman"))
)
x <- with(df_1,
cor.test(imc, pas, method = c("spearman")))
with(df_1,
cor.test(imc, pas, method = c("spearman")))
with(df_1,
cor.test(imc, pas, method = "spearman"))
with(df_1,
cor.test(imc, pas, method = "pearson"))
with(df_1,
cor.test(imc, pas, method = "spearman"))
x <- with(df_1,
cor.test(imc, pas, method = "spearman"))
x$statistic
x$p.value
x[[p.value]]
x[["p.value"]]
with(df_1,
lm(pas ~ traitL + sexL + imc))
with(df_1,
lm(pas ~ traitL + sexL + imc) |>
summary())
