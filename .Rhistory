pas ~ imc,
col = "dodgerblue3", # traitement A en bleu
pch = 4) # femme avec une croix
# femmes, traitement B
points(data = subset(df_1, subset = c(sex == 0 & trait == 3)),
pas ~ imc,
col = "palegreen3", # traitement B en vert
pch = 4) # femme avec une croix
# hommes, placebo
points(data = subset(df_1, subset = c(sex == 1 & trait == 1)),
pas ~ imc,
col = "indianred3", # placebo en rouge
pch = 1) # hommes avec un rond
# hommes, traitement A
points(data = subset(df_1, subset = c(sex == 1 & trait == 2)),
pas ~ imc,
col = "dodgerblue3", # traitement A en bleu
pch = 1) # hommes avec un rond
# hommes, traitement B
points(data = subset(df_1, subset = c(sex == 1 & trait == 3)),
pas ~ imc,
col = "palegreen3", # traitement B en vert
pch = 1) # hommes avec un rond
axis(1, # axe du bas
lwd = 1, # largeur de la ligne
font.axis=1) # taille de la police de caractère
axis(2, # axe à gauche
lwd = 1, # largeur de la ligne
font.axis=1) # taille de la police de caractère
title(xlab = "IMC (kg/m²)")
title(ylab = "PAS (mmHg)")
title(main = "Nuage de points de la PAS en fonction de l'IMC")
legend("topright",
c("Femme, P", "Femme, A", "Femme, B",
"Homme, P", "Homme, A", "Homme, B"),
pch = c(4,4,4,1,1,1),
col = c("indianred3", "dodgerblue3", "palegreen3",
"indianred3", "dodgerblue3", "palegreen3"),
ncol = 1,
cex = 0.5)
legend("bottomright",
c("Femme, P", "Femme, A", "Femme, B",
"Homme, P", "Homme, A", "Homme, B"),
pch = c(4,4,4,1,1,1),
col = c("indianred3", "dodgerblue3", "palegreen3",
"indianred3", "dodgerblue3", "palegreen3"),
ncol = 1,
cex = 0.6)
legend("bottomright",
c("Femme, P", "Femme, A", "Femme, B",
"Homme, P", "Homme, A", "Homme, B"),
pch = c(4,4,4,1,1,1),
col = c("indianred3", "dodgerblue3", "palegreen3",
"indianred3", "dodgerblue3", "palegreen3"),
ncol = 1,
cex = 0.7)
example(axis)
example(points)
example(legend)
par(mar = c(5,4,4,2)) # paramètre des marges par défaut
example(points)
par(mar = c(5,4,4,2)) # paramètre des marges par défaut
par(mar = c(5,4,4,2) + 0.1) # paramètre des marges par défaut
example(points)
par()$mar
par(mar = c(5,4,4,2) + 0.1) # paramètre des marges par défaut
par()$mar
plot.new()
par(mar = c(5,4,4,2) + 0.1) # paramètre des marges par défaut
plot.window(xlim = c(15, 35), # range(df_1$imc)
ylim = c(80, 180)) # range(df_1$pas)
grid() # ajoute une grille
# femmes, placebo
points(data = subset(df_1, subset = c(sex == "Féminin" & trait == "Placebo")),
pas ~ imc,
col = "indianred3", # placebo en rouge
pch = 4) # femme avec une croix
# femmes, traitement A
points(data = subset(df_1, subset = c(sex == 0 & trait == 2)),
pas ~ imc,
col = "dodgerblue3", # traitement A en bleu
pch = 4) # femme avec une croix
# femmes, traitement B
points(data = subset(df_1, subset = c(sex == 0 & trait == 3)),
pas ~ imc,
col = "palegreen3", # traitement B en vert
pch = 4) # femme avec une croix
# hommes, placebo
points(data = subset(df_1, subset = c(sex == 1 & trait == 1)),
pas ~ imc,
col = "indianred3", # placebo en rouge
pch = 1) # hommes avec un rond
# hommes, traitement A
points(data = subset(df_1, subset = c(sex == 1 & trait == 2)),
pas ~ imc,
col = "dodgerblue3", # traitement A en bleu
pch = 1) # hommes avec un rond
# hommes, traitement B
points(data = subset(df_1, subset = c(sex == 1 & trait == 3)),
pas ~ imc,
col = "palegreen3", # traitement B en vert
pch = 1) # hommes avec un rond
axis(1, # axe du bas
lwd = 1, # largeur de la ligne
font.axis=1) # taille de la police de caractère
axis(2, # axe à gauche
lwd = 1, # largeur de la ligne
font.axis=1) # taille de la police de caractère
title(xlab = "IMC (kg/m²)")
title(ylab = "PAS (mmHg)")
title(main = "Nuage de points de la PAS en fonction de l'IMC")
legend("bottomright",
c("Femme, P", "Femme, A", "Femme, B",
"Homme, P", "Homme, A", "Homme, B"),
pch = c(4,4,4,1,1,1),
col = c("indianred3", "dodgerblue3", "palegreen3",
"indianred3", "dodgerblue3", "palegreen3"),
ncol = 1,
cex = 0.7)
example(line)
example(axis)
example(legend)
par()$mar
t.test(data = df_1, imc ~ sex)
t.test(data = df_1, imc ~ sex,
var.equal = TRUE)
ttest.imc.sex <- t.test(data = df_1, imc ~ sex,
var.equal = TRUE)
ttest.imc.sex
class(ttest.imc.sex)
ttest.imc.sex$p.value
ttest.imc.sex$statistic
ttest.imc.sex$parameter
ttest.imc.sex$conf.int
ttest.pax.sex <- t.test(data = df_1, pax ~ sex,
var.equal = TRUE)
ttest.pax.sex <- t.test(data = df_1, pas ~ sex,
var.equal = TRUE)
ttest.pas.sex <- t.test(data = df_1, pas ~ sex,
var.equal = TRUE)
ttest.pas.sex
?car::leveneTest
car::leveneTest(data = df_1, imc ~ sex)
car::leveneTest(data = df_1, imc ~ sexL)
car::leveneTest(data = df_1, pas ~ sexL) # la variable en classe doit être un factor
wilcox.test(data = df_1, imc ~ sex)
wilcox.test(data = df_1, pas ~ sex) # p-value = 0.02499
x <- df_1$imc
y <- df_1$sex
unique(y)
length(unique(y))
i = 1
unique(y)[i]
table(!is.na(x[y == unique(y)[i]]))["TRUE"]
mean(x[y == unique(y)[i]])
n_i <- table(!is.na(x[y == unique(y)[i]]))["TRUE"],
n_i <- table(!is.na(x[y == unique(y)[i]]))["TRUE"]
m_i <- round(mean(x[y == unique(y)[i]], na.rm = na.rm), digits = dig)
na.rm = TRUE
dig = 1
n_i <- table(!is.na(x[y == unique(y)[i]]))["TRUE"]
m_i <- round(mean(x[y == unique(y)[i]], na.rm = na.rm), digits = dig)
sd_i <- round(sd(x[y == unique(y)[i]], na.rm = na.rm), digits = dig)
n_i
m_i
sd_i
param <- list()
for(i in 1:length(unique(y))) {
n_i <- table(!is.na(x[y == unique(y)[i]]))["TRUE"]
m_i <- round(mean(x[y == unique(y)[i]], na.rm = na.rm), digits = dig)
sd_i <- round(sd(x[y == unique(y)[i]], na.rm = na.rm), digits = dig)
param_i <- paste0(as.character(n_i), ", ",
as.character(m_i), " ± ",
as.character(sd_i))
param[[i]] <- parami_i
}
param <- list()
for(i in 1:length(unique(y))) {
n_i <- table(!is.na(x[y == unique(y)[i]]))["TRUE"]
m_i <- round(mean(x[y == unique(y)[i]], na.rm = na.rm), digits = dig)
sd_i <- round(sd(x[y == unique(y)[i]], na.rm = na.rm), digits = dig)
param_i <- paste0(as.character(n_i), ", ",
as.character(m_i), " ± ",
as.character(sd_i))
param[[i]] <- param_i
}
param
table(df_1$sex)
table(df_1$sex)["0"]
paste0("N = ", table(df_1$sex)["0"])
tb_biv_quanti <- data.frame(variables = "",
femmes = paste0("N = ", table(df_1$sex)["0"]),
hommes = paste0("N = ", table(df_1$sex)["1"]))
tb_biv_quanti
biv_quanti <- fonction(x, y, dig = 1, na.rm = TRUE) {
biv_quanti <- fonction(x, y, dig = 1, na.rm = TRUE) {
biv_quanti <- fonction(x, y, dig = 1, na.rm = TRUE) {
biv_quanti <- function(x, y, dig = 1, na.rm = TRUE) {
param = list()
for(i in 1:length(unique(y))) {
m_i = round(mean(x[y == unique(y)[i]], na.rm = na.rm), digits = dig)
sd_i = round(sd(x[y == unique(y)[i]], na.rm = na.rm), digits = dig)
param_i = paste0(as.character(m_i), " ± ",
as.character(sd_i))
param[[i]] = param_i
}
return(param)
}
list_imc_sex <- biv_quanti(df_1$imc, df_1$sex, dig = 1, na.rm = TRUE)
list_imc_sex
list_pas_sex <- biv_quanti(df_1$pas, df_1$sex, dig = 1, na.rm = TRUE)
list_pas_sex
tb_biv_quanti
tb_biv_quanti <- rbind(tb_biv_quanti,
data.frame(variables = meta_df_1$label[meta_df_1$var == "imc"],
femmes = list_imc_sex[[1]],
hommes = list_imc_sex[[2]]))
tb_biv_quanti
tb_biv_quanti <- data.frame(variables = "",
femmes = paste0("N = ", table(df_1$sex)["0"]),
hommes = paste0("N = ", table(df_1$sex)["1"]))
## Description (n, mean, sd) de l'imc et de la pas en fonction du traitement
# on ajoute les résultats de la description de l'imc en fonction du sexe
tb_biv_quanti <- rbind(tb_biv_quanti,
data.frame(variables = meta_df_1$label[meta_df_1$var == "imc"],
femmes = list_imc_sex[[1]],
hommes = list_imc_sex[[2]]))
# on ajoute les résultats de la description de la PAS en fonction du sexe
tb_biv_quanti <- rbind(tb_biv_quanti,
data.frame(variables = meta_df_1$label[meta_df_1$var == "pas"],
femmes = list_pas_sex[[1]],
hommes = list_pas_sex[[2]]))
tb_biv_quanti
tt(tb_biv_quanti)
qflextable(tb_biv_quanti)
names(tb_biv_quanti)[2] <- "Femmes \n mean ± sd"
qflextable(tb_biv_quanti)
names(tb_biv_quanti)[3]
names(tb_biv_quanti)[3] <- "Hommes \n mean ± sd"
qflextable(tb_biv_quanti)
list_imc_trait <- biv_quanti(df_1$imc, df_1$trait, dig = 1, na.rm = TRUE)
list_pas_trait <- biv_quanti(df_1$pas, df_1$trait, dig = 1, na.rm = TRUE)
list_imc_trait
list_pas_trait
tb_biv_quanti <- data.frame(variables = "",
femmes = "",
hommes = "")
tb_biv_quanti
tb_biv_quanti <- data.frame(variables = NULL,
femmes = NULL,
hommes = NULL)
tb_biv_quanti2 <- data.frame(variables = NULL,
femmes = NULL,
hommes = NULL)
tb_biv_quanti2
tb_biv_quanti2 <- data.frame(variables = meta_df_1$label[meta_df_1$var == "imc"],
placebo = list_imc_trait[[1]],
ttt_A = list_imc_trait[[2]],
ttt_B = list_imc_trait[[3]])
tb_biv_quanti2
tb_biv_quanti2 <- rbind(tb_biv_quanti2,
data.frame(variables = meta_df_1$label[meta_df_1$var == "pas"],
placebo = list_pas_trait[[1]],
ttt_A = list_pas_trait[[2]],
ttt_B = list_pas_trait[[3]]))
tb_biv_quanti2
table(df_1$trait)
table(df_1$trait)["1"]
paste0("Placebo \n N = ",
table(df_1$trait)["1"], "\n",
"mean ± sd")
paste0("Placebo \n N = ",
table(df_1$trait)["1"], "\n ",
"mean ± sd")
names(tb_biv_quanti2)[2] <- paste0("Placebo \n N = ",
table(df_1$trait)["1"], "\n ",
"mean ± sd")
names(tb_biv_quanti2)[3] <- paste0("Traitement A \n N = ",
table(df_1$trait)["2"], "\n ",
"mean ± sd")
names(tb_biv_quanti2)[4] <- paste0("Traitement B \n N = ",
table(df_1$trait)["3"], "\n ",
"mean ± sd")
tb_biv_quanti2
tt(tb_biv_quanti)
qflextable(tb_biv_quanti2)
tt(tb_biv_quanti2)
lm(imc ~ traitL,
data = df_1)
mod_imc_trait <- lm(imc ~ traitL,
data = df_1)
summary(mod_imc_trait)
mod_imc_trait <- lm(imc ~ traitL,
data = df_1)
summary(mod_imc_trait)
anova_imc_trait <- anova(mod_imc_trait)
anova_imc_trait
summary(anova_imc_trait)
anova_imc_trait
anova_imc_trait$`Pr(>F)`
class(anova_imc_trait)
anova_imc_trait$`Pr(>F)`
anova_imc_trait$`Pr(>F)`["traitL"]
anova_imc_trait$`Pr(>F)`[1]
car::leveneTest(data = df_1, imc ~ traitL) # la variable en classe doit être un factor
car::leveneTest(data = df_1, pas ~ traitL) # la variable en classe doit être un factor
anova_pas_trait <- anova(lm(pas ~ traitL,
data = df_1))
anova_pas_trait
anova_pas_trait$`Pr(>F)`
anova_pas_trait$`Pr(>F)`[1]
tb_biv_quanti
biv_quanti <- function(x, y, dig = 1, na.rm = TRUE) {
param = list()
for(i in 1:length(unique(y))) {
m_i = round(mean(x[y == unique(y)[i]], na.rm = na.rm), digits = dig)
sd_i = round(sd(x[y == unique(y)[i]], na.rm = na.rm), digits = dig)
param_i = paste0(as.character(m_i), " ± ",
as.character(sd_i))
param[[i]] = param_i
}
return(param)
}
## Description (mean, sd) de l'imc et de la pas en fonction du sex
# on va stocker les résultats dans une base de données pour les mettre en forme
# on veut une base selon le format suivant :
#   variables  |        femme       |    homme                #
# ----------------------------------------------------------- #
#              |        N = XXX     |    N = XXX              #
#     imc      |    moy ± sd        |    moy ± sd             #
#     pas      |    moy ± sd        |    moy ± sd             #
list_imc_sex <- biv_quanti(df_1$imc, df_1$sex, dig = 1, na.rm = TRUE)
list_pas_sex <- biv_quanti(df_1$pas, df_1$sex, dig = 1, na.rm = TRUE)
# on commence par la première ligne
tb_biv_quanti1 <- data.frame(variables = "",
femmes = paste0("N = ", table(df_1$sex)["0"]),
hommes = paste0("N = ", table(df_1$sex)["1"]))
# on ajoute les résultats de la description de l'imc en fonction du sexe
tb_biv_quanti1 <- rbind(tb_biv_quanti1,
data.frame(variables = meta_df_1$label[meta_df_1$var == "imc"],
femmes = list_imc_sex[[1]],
hommes = list_imc_sex[[2]]))
# on ajoute les résultats de la description de la PAS en fonction du sexe
tb_biv_quanti1 <- rbind(tb_biv_quanti1,
data.frame(variables = meta_df_1$label[meta_df_1$var == "pas"],
femmes = list_pas_sex[[1]],
hommes = list_pas_sex[[2]]))
tt(tb_biv_quanti1)
qflextable(tb_biv_quanti1)
names(tb_biv_quanti1)[2] <- "Femmes \n mean ± sd" # \n permet d'aller à la ligne
names(tb_biv_quanti1)[3] <- "Hommes \n mean ± sd"
qflextable(tb_biv_quanti1)
## Description (mean, sd) de l'imc et de la pas en fonction du sexe
list_imc_trait <- biv_quanti(df_1$imc, df_1$trait, dig = 1, na.rm = TRUE)
list_pas_trait <- biv_quanti(df_1$pas, df_1$trait, dig = 1, na.rm = TRUE)
## dans cet exemple, on ajoutera les effectifs dans la table finale
## en titre de colonnes
# on commence par les valeurs de l'imc en fonction du traitement
tb_biv_quanti2 <- data.frame(variables = meta_df_1$label[meta_df_1$var == "imc"],
placebo = list_imc_trait[[1]],
ttt_A = list_imc_trait[[2]],
ttt_B = list_imc_trait[[3]])
# on ajoute les valeurs de la pas en fonction du traitement
tb_biv_quanti2 <- rbind(tb_biv_quanti2,
data.frame(variables = meta_df_1$label[meta_df_1$var == "pas"],
placebo = list_pas_trait[[1]],
ttt_A = list_pas_trait[[2]],
ttt_B = list_pas_trait[[3]]))
# On va donner des titres de colonnes plus précis
names(tb_biv_quanti2)[2] <- paste0("Placebo \n N = ",
table(df_1$trait)["1"], "\n ",
"mean ± sd")
names(tb_biv_quanti2)[3] <- paste0("Traitement A \n N = ",
table(df_1$trait)["2"], "\n ",
"mean ± sd")
names(tb_biv_quanti2)[4] <- paste0("Traitement B \n N = ",
table(df_1$trait)["3"], "\n ",
"mean ± sd")
qflextable(tb_biv_quanti2)
ttest.imc.sex <- t.test(data = df_1, imc ~ sex,
var.equal = TRUE) # par défaut, c'est faux, il applique
# un test de Welch (pour variances inégales)
ttest.imc.sex
# Two Sample t-test
#
# data:  imc by sex
# t = -2.2502, df = 298, p-value = 0.02517
# alternative hypothesis: true difference in means between group 0 and group 1 is not equal to 0
# 95 percent confidence interval:
#   -1.48508718 -0.09935993
# sample estimates:
# mean in group 0 mean in group 1
#        24.09281        24.88503
ttest.imc.sex$p.value # [1] 0.02516741    p-value
ttest.imc.sex$conf.int # intervalle de confiance à 95% de la dif. des 2 moyennes
# [1] -1.48508718 -0.09935993
# attr(,"conf.level")
# [1] 0.95
ttest.pas.sex <- t.test(data = df_1, pas ~ sex,
var.equal = TRUE)
### Test de Levene pour vérifier l'égalité des variances
# la fonction du test de Levene est dans le package "car"
?car::leveneTest
car::leveneTest(data = df_1, imc ~ sexL) # la variable en classe doit être un factor
car::leveneTest(data = df_1, pas ~ sexL) # la variable en classe doit être un factor
# OK, les deux p-values sont largement > 0.05
### Si les variances n'avaient pas été égales, on aurait appliqué le
### Test de Wilcoxon-Mann-Whitney
wilcox.test(data = df_1, imc ~ sex) # p-value = 0.02499
wilcox.test(data = df_1, pas ~ sex) # p-value = 1.529e-06
# ---------------------------------------------------------------------------- #
## 5.2) Tests d'ANOVA et de Kruskal-Wallis ----
# ---------------------------------------------------------------------------- #
# Comparaison de l'IMC et de la PAS en fonction du traitement (3 moyennes)
### Test d'Anova
# c'est un modèle linéaire, on va utiliser la fonction lm() pour linear model
# utiliser le facteur traitL permet de créer automatiquement des indicatrices
mod_imc_trait <- lm(imc ~ traitL,
data = df_1)
summary(mod_imc_trait)
# Coefficients:
#                    Estimate Std. Error t value Pr(>|t|)
# (Intercept)        24.32083    0.28032  86.761   <2e-16 ***
# traitLTraitement A  0.50774    0.42685   1.190    0.235
# traitLTraitement B  0.02074    0.42957   0.048    0.962
# pour réaliser le test d'Anova, on le calcule avec la commande anova appliquée
# à notre résultat, pour avoir la table d'Anova avec les sources de variabilité
anova_imc_trait <- anova(mod_imc_trait)
# Response: imc
#            Df Sum Sq Mean Sq F value Pr(>F)
# traitL      2   15.8  7.9009  0.8379 0.4336    p = 0.43
# Residuals 297 2800.5  9.4294
class(anova_imc_trait) # le résultat est un data.frame (bien adapté pour une table)
anova_imc_trait$`Pr(>F)`[1] # 0.4336368
anova_pas_trait <- anova(lm(pas ~ traitL,
data = df_1))
anova_pas_trait$`Pr(>F)`[1] # p-value = 1.671077e-05 pour la PAS en fonction du ttt
### on vérifie l'égalité des variances :
car::leveneTest(data = df_1, imc ~ traitL) # p = 0.3372   OK
car::leveneTest(data = df_1, pas ~ traitL) # p = 0.4703   OK
tb_biv_quanti1
tb_biv_quanti1$`p-values` <- c(ttest.imc.sex$p.value,
ttest.pas.sex$p.value)
tb_biv_quanti1
c("",
as.character(round(ttest.imc.sex$p.value, digits = 2)),
as.character(round(ttest.pas.sex$p.value, digits = 2)))
ttest.pas.sex
ttest.pas.sex$p.value
round(ttest.pas.sex$p.value, digits = 7)
ttest.imc.sex$p.value
tb_biv_quanti1$`p-values` <- c("",
as.character(round(ttest.imc.sex$p.value, digits = 2)),
as.character(round(ttest.pas.sex$p.value, digits = 7)))
tb_biv_quanti1
qflextable(tb_biv_quanti1)
tb_biv_quanti2
anova_imc_trait$`Pr(>F)`[1]
anova_pas_trait$`Pr(>F)`[1]
tb_biv_quanti2$`p-values` <- c(as.character(round(anova_imc_trait$`Pr(>F)`[1], digits = 2)),
as.character(round(anova_pas_trait$`Pr(>F)`[1], digits = 5)))
qflextable(tb_biv_quanti2)
kruskal.test(imc, traitL, data = df_1)
kruskal.test(imc ~ traitL, data = df_1)
kruskal.test(pas ~ traitL, data = df_1) # p-value = 0.327
model <- lm(pas ~ traitL + sexL + imc,
data = df_1)
summary(model)
plot(model)
plot(model$residuals ~ model$fitted.values)
loes.model <- loess(model$residuals ~ model$fitted.values)
loes.model <- loess(model$residuals ~ model$fitted.values)
plot(model$residuals ~ model$fitted.values)
lines(predict(loes.model), col='red', lwd=2)
loess.smooth(model$residuals ~ model$fitted.values)
loess.smooth(model$fitted.values, model$residuals)
scatter.smooth(model$fitted.values, model$residuals)
scatter.smooth(model$fitted.values, model$residuals,
lpars =list(col = "red", lwd = 3, lty = 3))
scatter.smooth(model$fitted.values, model$residuals,
lpars =list(col = "red", lwd = 3, lty = 2))
loes.model <- loess(model$residuals ~ model$fitted.values)
plot(model$residuals ~ model$fitted.values)
lines(predict(loes.model), col='red', lwd=2)
scatter.smooth(model$fitted.values, model$residuals,
lpars =list(col = "red", lwd = 2, lty = 1))
scatter.smooth(model$fitted.values, model$residuals,
lpars =list(col = "red", lwd = 0.5, lty = 1))
scatter.smooth(model$fitted.values, model$residuals,
lpars =list(col = "red", lwd = 0.5, lty = 1),
xlab = "Valeurs prédites", ylab = "Résidus")
abline(h = 0)
scatter.smooth(model$fitted.values, model$residuals,
lpars =list(col = "red", lwd = 0.5, lty = 1),
xlab = "Valeurs prédites", ylab = "Résidus")
abline(h = 0, lwd = 0.25, lty = 2)
scatter.smooth(model$fitted.values, model$residuals,
lpars =list(col = "red", lwd = 0.5, lty = 1),
xlab = "Valeurs prédites", ylab = "Résidus")
abline(h = 0, lwd = 0.1, lty = 2)
scatter.smooth(model$fitted.values, model$residuals,
lpars =list(col = "red", lwd = 0.5, lty = 1),
xlab = "Valeurs prédites", ylab = "Résidus")
abline(h = 0, lwd = 0.5, lty = 2)
scatter.smooth(model$fitted.values, model$residuals,
lpars =list(col = "red", lwd = 0.5, lty = 1),
xlab = "Valeurs prédites", ylab = "Résidus")
abline(h = 0, lwd = 0.5, lty = 2, col = "grey")
scatter.smooth(model$fitted.values, model$residuals,
lpars =list(col = "red", lwd = 0.5, lty = 1),
xlab = "Valeurs prédites", ylab = "Résidus")
abline(h = 0, lwd = 0.5, lty = 2)
