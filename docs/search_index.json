[["index.html", "Formation R Chapter 1 Bienvenue sur cette formation au logiciel R 1.1 Pourquoi choisir R ? 1.2 Téléchargez le logiciel R 1.3 Téléchargez un IDE (RStudio recommandé) 1.4 Trouver de l’aide sur R 1.5 Conventions d’écriture", " Formation R Benoît Lepage 2025-07-15 Chapter 1 Bienvenue sur cette formation au logiciel R R est un logiciel accessible gratuitement permettant de réaliser des analyses statistiques dans un environnement windows, macOS ou Linux. 1.1 Pourquoi choisir R ? Le logiciel est gratuit, très complet, avec une communauté d’utilisateurs très active dans le monde entier. Il est fréquent que les nouvelles méthodes d’analyses statistiques développées dans les équipes académiques soient d’abord mises à disposition sur R. Le logiciel R repose sur l’utilisation de scripts dans lesquels nous allons programmer les analyses statistiques. Cette écriture sous forme de programmation peut paraître austère à première vue, mais est indispensable pour permettre la reproductibilité et la transparence des analyses. La même démarche de programmation est utilisée dans tous les logiciels statistiques professionnels (Stata, SAS, Python, Matlab, etc). Pour utiliser R, les premières choses à faire sont de : télécharger le logiciel R et télécharger un Environnement de Développement Intégré (IDE) comme RStudio. 1.2 Téléchargez le logiciel R Vous pouvez télécharger la dernière version stable du logiciel R sur le site du R project. Figure 1.1: Site du R project, en juillet 2025 Cliquez sur “download R”, choisissez un site mirroir (par exemple un des sites en France). Puis téléchargez la version de R en fonction de votre système d’exploitation (Windows, macOS ou Linux). Figure 1.2: Choisissez la version adaptée à votre système d’exploitation Enfin, installez R à partir du fichier d’installation que vous venez de télécharger. 1.2.1 Ouvrez le logiciel R Si vous ouvrez le logiciel R, vous aller trouver l’interface graphique de R (RGui pour R Graphical user interface). Il est possible de faire vos analyses statistiques à partir de cette interface graphique, mais elle est très très austère. Figure 1.3: L’interface graphique de R (RGui) Plutôt que d’utiliser cette interface RGui, nous vous recommandons fortement d’utiliser un Environnement de Développement Intégré (IDE), comme RStudio, qui vous facilitera grandement la vie pour utiliser un logiciel statistique qui repose sur de la programmation. 1.3 Téléchargez un IDE (RStudio recommandé) RStudio est un environnement qui permet d’utiliser R, mais également d’autres logiciels de programmation comme Python, SQL, Stan, C++, etc. Cet environnement vous facilitera le travail pour : éditer vos scripts de programmation, accéder à la console, visualiser vos environnements de travail avec les fichiers et les objets qu’il contient, visualiser vos sorties graphiques et certaines tables d’analyses, visualiser vos données, visualiser les fichiers d’aide, gérer les packages permettant de faire des analyses spécifiques, et bien d’autres choses encore. Par exemple, le tutoriel que vous êtes en train de lire a été créé à partir du package bookdown avec le logiciels R, au sein de l’IDE RStudio, Vous pouvez télécharger la dernière version de RStudio sur le site de la compagnie Posit. Choisissez la version qui est adaptée à votre système d’exploitation (Windows, macOS ou Linux). Figure 1.4: téléchargez RStudio Figure 1.5: téléchargez RStudio Puis, installez RStudio à partir du fichier d’installation que vous venez de télécharger. 1.3.1 Ouvrez l’IDE RStudio Ouvrez RStudio, puis commencez par ouvrir un script à partir du menu File &gt; New File &gt; R script ou bien en utilisant le raccourci Ctrl+Maj+N sur windows ou bien en cliquant sur le petit fichier blanc avec un + vert en haut à gauche, puis choisir “R script” Figure 1.6: Ouvrir un nouveau script L’interface de RStudio contient un menu, 4 quadrants et des sous-menus et boutons dans chaque cadrant. Figure 1.7: Les 4 cadrants de RStudio Les menus qui vous seront le plus utiles sont : Dans le menu principal, le menu File vous permettra de créer de nouveaux fichiers, d’ouvrir des fichiers déjà existants, de sauver vos fichiers, d’importer des bases de données, etc. le menu Tools &gt; Install packages… pour installer de nouveaux packages le menu Tools &gt; Global Options… vous permet de choisir la version du logiciel R à utiliser (onglet “R General”) ou bien de changer l’aspect graphique de l’environnement RStudio (onglet “Appearance”, puis choisissez un “Editor theme”, avec différentes interfaces claires ou sombres) Au sein du script (cadrant 1) le bouton “disquette” permet de sauvegarder votre script le bouton “run” permet de faire tourner votre programme d’analyse (les lignes que vous avez sélectionnées). Par exemple, tapez la commande suivante dans le script, sélectionnez la ligne et cliquez sur le bouton “run” (ou avec un raccourci clavier ctrl+entrée sur windows, ou encore command+entrée sur macOS). print(&quot;Hello Toulouse&quot;) et vous devriez voir la commande &gt; print(\"Hello Toulouse\") puis son résultat \"Hello Toulouse\" dans l’onglet console du cadrant 3. Au sein du cadrant 3, l’onglet le plus utile pour pour les débutants est l’onglet console la console est la même que la console affichée dans l’interface RGui du logiciel R que l’on a vu au paragraphe 1.2.1. la console commence par afficher la version de R en cours d’utilisation vous pouvez y saisir des commandes et obtenir directement leurs résultats, par exemple si vous tapez dans la console 4+9, vous obtiendrez directement le résultat 13. Attention, les commandes que vous saisissez directement dans la console ne seront pas sauvegardées. Si vous voulez sauvegarder des commandes, il faut utiliser le script (cadrant 1) 4+9 ## [1] 13 Au sein du cadrant 2, l’onglet le plus utile pour les débutants est l’onglet Environment cet onglet vous permettra de visualiser les “objets R” créés pendant vos analyses. Par exemple si vous saisissez v &lt;- 1:10 dans la console, vous allez voir apparaître l’objet v dans l’environnement de travail (il s’agit d’un vecteur de 1 à 10, nommé “v”). Au sein du cadrant 4, les onglets les plus utiles pour les débutants sont : l’onglet “File” qui contient les dossiers et fichiers au sein d’un dossier de travail (voir le chapitre 3 pour créer et organiser un dossier de travail associé à un “projet R”) l’onglet “Plots” où vous retrouverez vos sorties graphiques. Au sein de cet onglet, vous trouverez un menu pour exporter vos graphiques selon différents formats. Des boutons permettent également de zoomer et d’effacer les graphiques. Par exemple, si vous saisissez hist(rnorm(10000)) dans la console, un histogramme d’une distribution normale centrée réduite va apparaître. Vous pouvez effacer la figure en cliquant sur le bouton avec la croix rouge (efface la figure actuelle) ou le balet (efface l’ensemble des figures). l’onglet “Packages” où vous pourrez activer, désactiver ou mettre à jour les packages qui ont été téléchargés. l’onglet “Help” où vous trouverez de l’aide. Par exemple si vous saisissez help(mean) dans la console, l’aide de la commande mean va s’afficher. Vous pouvez également utiliser le champ de recherche de fonctions dans le menu “Help”. 1.4 Trouver de l’aide sur R De nombreuses ressources sont disponibles pour vous aider à utiliser R : Les pages d’aide en ligne de R, qui apparaîssent directement dans RStudio. Vous pouvez obtenir de l’aide sur des fonctions et des packages : en appliquant une recherche par mot clé dans le champ de recherche de l’onglet “help” en utilisant directement dans la console la fonction help.search() ou ?? associée à un mot clé (par exemple help.search(student) ou ??student), ou la fonction help() associée à une fonction (par exemple help(t.test) ou ?t.test) Ces pages d’aide suivent la structure suivante : une partie “Description” qui décrit en quelques phrases ce que fait la fonction une partie “Usage” qui décrit la syntaxe de la fonction avec ses arguments une partie “Argument” qui précise comment renseigner les arguments de la fonction une partie “Detail” qui décrit en détail comment utiliser la fonction et ses arguments une partie “Value” qui décrit les sorties (les résultats) de la fonction, avec les éventuels sous-objets de la sortie une partie “Exemples” qui indique quelques exemple que vous pouvez directement lancer en cliquant sur “Run examples” Des fiches “mémoires” cheat sheets qui résument les principales fonctions : pour les commandes R bases des bonnes pratiques sur R méthodes de visualisation avec le package ggplot2 l’utilisation du package data.table l’utilisation du package dplyr et sa fiche dplyr l’utilisation du package stringr pour manipuler les chaînes de caractères, avec la fiche stringr la manipulation de dates Dates and times with lubridate et la fiche lubridate De nombreux livres et tutoriels disponibles gratuitement en ligne : Le guide R de Joseph Larmarange, est un guide très complet et didactique, en français L’Epidemiologist R Handbook est un tutoriel en anglais pour l’utilisation de R par des épidémiologistes Software carpentry met à disposition des guides introductifs bien réalisés en anglais, par exemple R for Reproducible Scientific Analysis ou encore Programming with R le livre R for Data Science propose une introduction très complète pour l’analyse de données descriptive principalement basée sur la suite de packages du Tidyverse le package R swirl propose une formation interactive directement dans la console de RStudio, téléchargez le package (install.packages(\"swirl\")), chargez le package (library(\"swirl\")) et laissez vous guider après avoir saisi swirl() dans la console. RStudio Education liste plusieurs ressources intéressantes pour les débutants Le site CRAN a des manuels assez complets, par exemple la page R Language Definition est une introduction assez complète au langage de programmation R. La page CRAN Task Views liste les packages qui sont disponibles par thématique ou type d’anlayse. Rechercher à l’aide d’un moteur de recherche (google, DuckDuckGo, Bing, etc). Ces recherches vous amèneront régulièrement vers des forums de discussion comme stackoverflow ou stackExchange. Si vous rencontrez une erreur ou une difficulté, il y a toutes les chances que d’autres personnes aient déjà rencontré ces erreurs et difficultés avant vous, et que des solutions détaillées soient proposées dans ces forums. Les chatbots de type GPT, Copilot ou Gemini : dans le cadre de votre formation au logiciel R, nous vous déconseillons l’utilisation de ces outils basés sur des LLM. Ces outils posent de nombreux problèmes en termes de transparence, de respect de droit d’auteur, d’impact environnemental, de déqualification (délegation de compétences pour rechercher de l’information, perte d’esprit critique), de dépendance aux Gafams, de dégradation des systèmes d’information, etc. Par ailleurs, bien qu’ils peuvent apporter des solutions fonctionnelles, il est bien plus utile d’avoir une bonne compréhension des bases de programmations sur R avant d’utiliser de tels outils : sans une bonne compréhension de la logique de programmation et des principales fonctions de R, vous aurez des difficultés à évaluer la fiabilité des solutions proposées, à vous débloquez en cas de problèmes, ou encore à adapter vos prompts pour obtenir de meilleures réponses. Les ressources décrites précédemment devraient vous permettre d’apporter efficacement des réponses à vos questions. 1.5 Conventions d’écriture Certaines conventions ont été proposées pour faciliter l’écriture et la lecture du code de programmation dans R. Elles ne sont pas obligatoires, mais nous vous encourrageons à les suivre. Par exemple, le Tidyverse style guide : nommer les variables et les fonctions en lettres minuscules, à l’aide de mots et de chiffres séparés par _ (underscore). Par exemple csp_1. Cette convention fait référence au style “snake case” ajouter un espace après une virgule, par exemple x[2, 5] ajouter des espaces avant et après les opérateurs arithmétiques, par exemple x &lt;- (1 + 2) / 5, à quelques exceptions près (pas d’espace avant ou après le signe “puissance” ^) y &lt;- x^2 + 3 "],["les-objets-dans-r.html", "Chapter 2 Les objets dans R 2.1 Manipuler les objets dans l’environnement 2.2 Principaux types de données 2.3 Principales structures de données 2.4 Objet à une seule valeur (scalaire ou texte) 2.5 Les vecteurs vector() 2.6 Les listes list() 2.7 Les matrices matrix() 2.8 Les bases de données data.frames()", " Chapter 2 Les objets dans R 2.1 Manipuler les objets dans l’environnement La programmation R repose sur des objets, qui apparaîtront dans la fenêtre Environment de RStudio. Voici quelques commandes de gestion des objets dans votre environnement : dans la console, commencez par créer les objets suivants. Pour assigner une ou plusieurs valeurs à un objet, on utilise une flèche dirigée vers la gauche &lt;-. Vous verrez apparaître ces objets dans la fenêtre Environment. # note : le signe dièze (#) permet d&#39;ajouter des commentaires dans le code # - le 1er objet est un vecteur de 10 entiers de 1 à 10 # - le 2ème objet est un vecteur de 3 lettres A, B et C # - le 3ème objet est un vecteur de 2 réels, calculés par 2 opérations # - le 4ème objet est une fonction qui ajoute 2 au vecteur x # - le 5ème objet est un scalaire égal à 42 objet_1 &lt;- c(1:10) objet_2 &lt;- c(&quot;A&quot;,&quot;B&quot;,&quot;C&quot;) objet_3 &lt;- c(10 / 3, 4 * 5) objet_4 &lt;- function(x) {x + 2} objet_5 &lt;- 42 la commande ls() permet de lister les objets dans l’environnement. la commande rm() permet de supprimer (remove) un ou plusieurs objets de l’environnement. ls() ## [1] &quot;objet_1&quot; &quot;objet_2&quot; &quot;objet_3&quot; &quot;objet_4&quot; &quot;objet_5&quot; rm(objet_2,objet_5) rm(list = ls()) # pour supprimer tous les objets présents dans l&#39;environnement 2.2 Principaux types de données Les données peuvent être de différents types : des nombres (?numeric). Ces nombres peuvent être des nombres réels (?double), par exemple 12.43. Il peut également s’agir de nombres entiers (?integer). Les nombres entiers sont saisis en ajoutant L à droite du nombre, par exemple 5L. des chaînes de caractères textuels (?character), définis avec des guillemets simples ou doubles , par exemple 'bonjour' ou \"au revoir\" des valeurs logiques (?logical), avec deux valeurs possibles : valeur booléenne vraie, notée TRUE ou bien T valeur booléenne fausse, notée FALSE ou bien F des variables qualitatives nominales (?factor) ou ordinales (?ordered) des dates (?Date) etc. une valeur manquante se note NA. L’ensemble vide se note NULL 2.2.1 Décrire le type de l’objet \\(\\spadesuit\\) On peut décrire quel est le type de l’objet avec les fonctions typeof (le type le plus élémentaire), mode et storage.mode (type de l’objet et mode de stockage de l’objet selon un regroupement un peu plus large) # les valeurs réelles (&#39;double&#39;) et les entiers (&#39;integer&#39;) sont de mode &#39;numeric&#39; typeof(2.53) # un réel typeof(5L) # et un entier mode(2.53) # sont de type &#39;numeric&#39; mode(5L) storage.mode(2.53) storage.mode(5L) # les chaînes de caractères sont de type et de mode &#39;character&#39; typeof(c(&quot;hello&quot;,&quot;Toulouse&quot;)) mode(c(&quot;hello&quot;,&quot;Toulouse&quot;)) # les valeurs logiques sont de type &#39;logical&#39; typeof(c(TRUE,FALSE,FALSE)) mode(c(TRUE,FALSE,FALSE)) x typeof(x) mode(x) storage.mode(x) 2.53 \"double\" \"numeric\" \"double\" 5L \"integer\" \"numeric\" \"integer\" \"bonjour\" \"character\" \"character\" \"character\" TRUE \"logical\" \"logical\" \"logical\" as.Date(\"2025-07-01\") \"double\" \"numeric\" \"double\" Les fonctions as.numeric, as.integer, as.character, as.logical permettent de définir un objet en tant que numérique, entier, chaîne de caractères, logique. as.numeric(5L) # définit un nombre entier en tant que nombre réel as.integer(4.95) # définit un réel en tant qu&#39;entier, seul l&#39;entier est conservé as.character(4.95) # définit un nombre en tant que chaîne de caractères # définir une valeur logique TRUE et FALSE en tant que valeur numérique # ou en tant qu&#39;entier donne les valeurs 1 et 0, respectivement as.numeric(TRUE) as.numeric(FALSE) # définir le nombre 0 en tant que valeur logique donne la valeur FALSE as.logical(0) # définir tout nombre différent de 0 en tant que valeur logique # donne la valeur TRUE as.logical(-14) as.logical(1) as.logical(4.95) Les fonctions is.numeric, is.integer, is.character, is.logical permettent d’évaluer si un objet est de type numérique, entier, textuel, logique. is.numeric(5L) # TRUE, un entier est bien un objet numérique is.integer(4.95) # FALSE, 4.95 n&#39;est pas un entier is.numeric(&quot;bonjour&quot;) # FALSE &quot;bonjour&quot; est une chaîne de caractères is.character(&quot;bonjour&quot;) # TRUE, &quot;bonjour&quot; est bien une chaîne de caractères is.character(4.95) # FALSE, 4.95 est un objet numérique is.logical(1) # FALSE, 1 est un objet numérique is.logical(as.logical(1)) # TRUE, as.logical(1) = TRUE, qui est un objet logique is.logical(TRUE) # TRUE est bien un objet logique 2.3 Principales structures de données Les principales structures de données que nous allons détailler dans la suite de ce chapitre sont : les vecteurs (?vector), dont font partie les scalaires (vecteurs à une seule valeur). les matrices (?matrix, ?array) les listes (?list) les bases de données (?data.frames). Il existe d’autres formats de base de données qui seront présentés plus tard (avec les packages tidyverse et data.table par exemple) 2.4 Objet à une seule valeur (scalaire ou texte) 2.4.1 Scalaires Assignez les valeurs 4 et 5 à deux objets x_1 &lt;- 4 x_2 &lt;- 5 2.4.2 Opérations mathématiques sur les scalaires 2.4.2.1 Calculatrice On peut utiliser les opérations classiques, comme sur une calculatrice : + pour additionner - pour soustraire * pour multiplier / pour diviser ^ pour mettre à la puissance e pour la notation scientifique x_1 + x_2 # 4 + 5 = 9 10 - x_1 # 10 - 4 = 6 x_1 * x_2 # 4 * 5 = 20 20 / x_2 # 20 / 5 = 4 x_1^2 # 4^2 = 16 10^-1 # 1/10 = 0.1 25^(0.5) # racine carrée de 25 (puissance 1/2) # notation scientifique pour les grands et petits nombres 1/1000000 # 1 pour 1 million = 1e-6 1/1e6 1e6 * 1000 # 1 million * 1000 = 1 milliard 2.4.2.2 Fonctions mathématiques Plusieurs fonctions mathématiques de bases sont implémentées nativement dans R : log(x) ou log(x, base = exp(1) pour le logarithme népérien, log10(x) pour le logarithme base 10, log2(x) pour le logarithme base 2, log(x, base = b) pour le logarithme base b, exp(x) pour l’exponentielle de x sqrt(x) pour la racine carrée de x abs(x) pour la valeur absolue de x les fonctions trigonométriques sont implémentées, avec cos(x), sin(x), tan(x) (cf. ?Trig) la constante \\(\\pi\\) est implémentée avec pi (cf. ?Constants) Si vous appliquer une fonction à une valeur qui ne fait pas partie du domaine de définition de la fonction, le résultat sera une valeur manquante notée NaN (not a number). Un message d’avertissement va apparaître si vous appliquez une fonction en dehors de son domaine de définition. # logarithmes et exponentielles log(1) log10(100) log(100, base = 10) exp(1) # racine carrée sqrt(x_2^2) # valeur absolue abs(10) abs(-10) # fonctions trigonométriques cos(1) sin(1) tan(1) pi 2 * pi * 10 # circonférence d&#39;un cercle de rayon 10 # si on utilise une valeur en dehors du domaine d&#39;application de la fonction log(-1) # -1 est en dehors du domaine de définition de la fonction log sqrt(-2) # -2 est en dehors du domaine de définition de la fonction racine carrée 2.4.2.3 Fonctions d’arrondi \\(\\spadesuit\\) Plusieurs fonctions sont disponibles dans R pour arrondir une valeur (cf. ?Round) : la fonction round() est utile pour arrondir les décimales. Il faut préciser en argument, le nombre de chiffres après la virgule. Attention : si le nombre se termine par un 5, l’arrondi se fait vers le chiffre pair le plus proche : 4.45 s’arrondit à 4.4 et 4.75 s’arrondit à 4.8 la fonction signif() arrondit aux chiffres les plus significatifs (les plus grands) la fonction floor() arrondit la valeur à l’entier inférieur la fonction ceiling() arrondit la valeur à l’entier supérieur la fonction trunc() ## fonction round() # l&#39;argument digits permet de définir le nombre de chiffres après la virgule # exemple si vous voulez arrondir à 2 chiffres après la virgule round(0.09400, digits = 2) round(0.08600, digits = 2) # arroudir à 1 chiffre après la virgule round(4.450, digits = 1) round(4.750, digits = 1) # pour arrondir une valeur 5, le résultat va vers le chiffre pair le plus proche round(4.5, digits = 0) # arrondit à l&#39;entier pair le plus proche round(1.5, digits = 0) # arrondit à l&#39;entier pair le plus proche ## fonction signif() # on garde les valeurs les plus significative, définie par l&#39;argument digits signif(123.456789, digits = 1) signif(123.456789, digits = 2) signif(123.456789, digits = 3) signif(123.456789, digits = 4) signif(123.456789, digits = 5) # la règle d&#39;arrondi vers le chiffre pair le plus proche est également appliquée signif(4.45, digits = 3) signif(4.45, digits = 2) signif(4.75, digits = 3) signif(4.75, digits = 2) ## fonction trunc() supprime simplementles décimales # note : ici, il n&#39;y a pas d&#39;arrondi vers la chiffre pair la plus proche) trunc(123.456) trunc(4.5) trunc(1.5) ## la fonction floor() arrondit à l&#39;entier inférieur floor(4.1) floor(4.9) ## la fonction ceiling() arrondit à l&#39;entier supérieur ceiling(4.1) ceiling(4.9) 2.4.3 Concaténation de chaînes de caractères On peut concatener deux objets en chaînes de caractères : la fonction paste() concatène les chaînes de caractères en séparant les vecteurs par un espace (argument par défaut, cf ?paste). Cet argument peut être modifié. la fonction paste0() concatène les chaînes de caractères sans espace. x1 &lt;- &quot;Bonjour&quot; x2 &lt;- &quot;Toulouse&quot; paste(x1, x2) ## [1] &quot;Bonjour Toulouse&quot; paste0(x1, x2) ## [1] &quot;BonjourToulouse&quot; paste(x1, x2, sep = &quot;, &quot;) # ici on sépare x1 et x2 par une virgule et un espace ## [1] &quot;Bonjour, Toulouse&quot; # vous pouvez inclure des nombres qui seront transformés en caractères paste0(x1, 123, x2) ## [1] &quot;Bonjour123Toulouse&quot; 2.4.4 Valeurs logiques TRUE et FALSE 2.4.4.1 Evaluer des conditions Nous pouvons utiliser les opérateurs de comparaison ci-dessous pour évaluer des conditions : == … est égal à … != … est différent de … &lt; … est inférieur à … &gt; … est supérieur à … &lt;= … est inférieur ou égal à … &gt;= … est supérieur ou égal à … %in% … est inclus dans … Par exemple, nous pouvons évaluer les comparaisons suivantes, la réponse attendue est vraie (TRUE) ou fausse (FALSE). 5 == 10 # est-ce que 5 est égal à 10 ? 5 != 10 # est-ce que 5 est différent de 10 ? 5 &lt; 10 # est-ce que 5 est inférieur à 10 ? 5 &gt; 10 # est-ce que 5 est supérieur à 10 ? 5 &lt;= 5 # est-ce que 5 est inférieur ou égal à 5 ? 5 &gt;= 5 # est-ce que 5 est supérieur ou égal à 5 ? 5 %in% c(4,5,6) # est-ce que 5 est inclus dans le vecteur (4,5,6) ? 5 %in% c(7,8,9) # est-ce que 5 est inclus dans le vecteur (7,8,9) ? La fonction identical permet d’évaluer si deux objets sont exactement égaux. Elle peut s’appliquer à des valeurs simples mais aussi à des objets de plus grandes dimensions (vecteurs, matrices, bases de données, …) identical(5, 10) # équivalent à la commande 5 == 10 identical(c(1,2,3), c(1,2,3)) # les deux vecteurs (1,2,3) sont bien les mêmes Une comparaison à une valeur manquante (NA) retournera une valeur manquante. Attention, si vous souhaitez évaluer si une valeur est manquante, il faut utiliser la fonction is.na(x) (plutôt que x == NA qui est déconseillé). NA &lt; 10 is.na(10) # éviter d&#39;utiliser 10 == NA pour tester si une valeur est manquante is.na(NA) is.na(c(1,2,3,NA,5,6,NA,8,9,10)) 2.4.5 Opérations sur des valeurs logiques On peut combiner des valeurs logiques avec les opérateurs logiques ET, OU, et NON (négation logique) &amp; opérateur ET | opérateur OU (sur windows, combinaison de touches altgr + 6 ; sur macOS, combinaison de touche alt + maj + L) ! opératuer NON (négation logique : “n’est pas”) Les résultats attendus d’une combinaison d’opérateurs logiques sont résumés dans les table de vérité ci-dessous. Opérateur ET a b a ET b TRUE TRUE TRUE TRUE FALSE FALSE FALSE TRUE FALSE FALSE FALSE FALSE Opérateur OU a b a OU b TRUE TRUE TRUE TRUE FALSE TRUE FALSE TRUE TRUE FALSE FALSE FALSE Opérateur NON a NON a TRUE FALSE FALSE TRUE # opérateur ET TRUE &amp; TRUE TRUE &amp; FALSE FALSE &amp; TRUE FALSE &amp; FALSE (5 &gt; 10) &amp; (2 != 5) # TRUE ET TRUE donne TRUE (5 &gt; 10) &amp; (2 == 5) # TRUE ET FALSE donne FALSE (5 &lt; 10) &amp; (2 == 5) # FALSE ET FALSE donne FALSE # opérateur OU TRUE | TRUE TRUE | FALSE FALSE | TRUE FALSE | FALSE (5 &lt; 10) | (2 != 5) # TRUE OU TRUE donne TRUE (5 &gt; 10) | (2 != 5) # FALSE OU TRUE donne TRUE (5 &gt; 10) | (2 == 5) # FALSE OU FALSE donne FALSE # opérateur NON !TRUE !FALSE !(5 &lt; 10) # non-TRUE donne FALSE !(5 &gt; 10) # non-FALSE donne TRUE Il existe également un opérateur xor() correspondant au OU EXCLUSIF : Opérateur OU EXCLUSIF a b a OU EXCLUSIF b TRUE TRUE FALSE TRUE FALSE TRUE FALSE TRUE TRUE FALSE FALSE FALSE # opérateur OU EXCLUSIF xor(TRUE, TRUE) xor(TRUE, FALSE) xor(FALSE, TRUE) xor(FALSE, FALSE) xor((5 &lt; 10), (2 != 5)) # (TRUE) OU exclusif (TRUE) donne FALSE xor((5 &gt; 10), (2 != 5)) # (FALSE) OU exclusif (TRUE) donne TRUE xor((2 != 5), (5 &gt; 10)) # (TRUE) OU exclusif (FALSE) donne TRUE xor((5 &gt; 10), (2 == 5)) # (FALSE) OU exclusif (FALSE) donne FALSE 2.5 Les vecteurs vector() 2.5.1 Création d’un vecteur de valeurs fonction seq, rep 2.5.2 Indiçage d’un vecteur utiliser l’indiçage pour sélectionner les éléments d’un vecteur 2.5.3 Les objets R peuvent posséder des attributs attributes() 2.6 Les listes list() 2.6.1 Création d’une liste Les vecteurs peuvent être reformatés sous forme de liste 2.6.2 Indiçage d’une liste 2.7 Les matrices matrix() 2.7.1 Création d’une matrice Les vecteurs peuvent être reformatés sous forme de matrice 2.7.2 Indiçage d’une matrice 2.7.3 matrices à plus de 2 dimensions array() 2.8 Les bases de données data.frames() "],["404.html", "Page not found", " Page not found The page you requested cannot be found (perhaps it was moved or renamed). You may want to try searching to find the page's new location, or use the table of contents to find the page you are looking for. "]]
